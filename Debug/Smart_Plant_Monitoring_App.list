
Smart_Plant_Monitoring_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002178  08002178  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002178  08002178  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002178  08002178  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800217c  0800217c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08002180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          0000c650  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000c700  2000c700  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001e95  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000a2a  00000000  00000000  00021fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000238  00000000  00000000  000229e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000016d  00000000  00000000  00022c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003991  00000000  00000000  00022d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000040e2  00000000  00000000  00026716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a94c  00000000  00000000  0002a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001030  00000000  00000000  00035144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00036174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f78 	.word	0x08001f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08001f78 	.word	0x08001f78

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <sensor_data_plant>:
#include <stdlib.h>
#include "Sensor_Data_Classifier.h"

/*API for fetching the simulated sensor data */
void sensor_data_plant(uint8_t plant_id, Sensor_data_Struct* sensor_data)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]

	sensor_data->moisture_data = simulated_moisture_data(plant_id);
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 f818 	bl	80002d4 <simulated_moisture_data>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	751a      	strb	r2, [r3, #20]
	sensor_data->temp_data = simulated_temperature_data(plant_id);
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f848 	bl	8000344 <simulated_temperature_data>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	755a      	strb	r2, [r3, #21]
	sensor_data->light_data = simulated_light_data(plant_id);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f878 	bl	80003b4 <simulated_light_data>
 80002c4:	4603      	mov	r3, r0
 80002c6:	461a      	mov	r2, r3
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	82da      	strh	r2, [r3, #22]


}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <simulated_moisture_data>:

/*APIs for generating simulated sensor data */
uint8_t simulated_moisture_data(uint8_t pin)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	switch(pin)
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d002      	beq.n	80002ea <simulated_moisture_data+0x16>
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d013      	beq.n	8000310 <simulated_moisture_data+0x3c>
 80002e8:	e025      	b.n	8000336 <simulated_moisture_data+0x62>
	{
		case (0):return rand() % 60 + 20; // from 20 to 79
 80002ea:	f000 fe4b 	bl	8000f84 <rand>
 80002ee:	4602      	mov	r2, r0
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <simulated_moisture_data+0x6c>)
 80002f2:	fb83 1302 	smull	r1, r3, r3, r2
 80002f6:	4413      	add	r3, r2
 80002f8:	1159      	asrs	r1, r3, #5
 80002fa:	17d3      	asrs	r3, r2, #31
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	460b      	mov	r3, r1
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	1a5b      	subs	r3, r3, r1
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	1ad1      	subs	r1, r2, r3
 8000308:	b2cb      	uxtb	r3, r1
 800030a:	3314      	adds	r3, #20
 800030c:	b2db      	uxtb	r3, r3
 800030e:	e013      	b.n	8000338 <simulated_moisture_data+0x64>
		case (1):return rand() % 60 + 20;
 8000310:	f000 fe38 	bl	8000f84 <rand>
 8000314:	4602      	mov	r2, r0
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <simulated_moisture_data+0x6c>)
 8000318:	fb83 1302 	smull	r1, r3, r3, r2
 800031c:	4413      	add	r3, r2
 800031e:	1159      	asrs	r1, r3, #5
 8000320:	17d3      	asrs	r3, r2, #31
 8000322:	1ac9      	subs	r1, r1, r3
 8000324:	460b      	mov	r3, r1
 8000326:	011b      	lsls	r3, r3, #4
 8000328:	1a5b      	subs	r3, r3, r1
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	1ad1      	subs	r1, r2, r3
 800032e:	b2cb      	uxtb	r3, r1
 8000330:	3314      	adds	r3, #20
 8000332:	b2db      	uxtb	r3, r3
 8000334:	e000      	b.n	8000338 <simulated_moisture_data+0x64>
		default: return 0;
 8000336:	2300      	movs	r3, #0
	}

}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	88888889 	.word	0x88888889

08000344 <simulated_temperature_data>:

uint8_t simulated_temperature_data(uint8_t pin)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	switch(pin)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <simulated_temperature_data+0x16>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d013      	beq.n	8000380 <simulated_temperature_data+0x3c>
 8000358:	e025      	b.n	80003a6 <simulated_temperature_data+0x62>
		{
			case (0):return rand() % 30 + 15; // from 15 to 44
 800035a:	f000 fe13 	bl	8000f84 <rand>
 800035e:	4602      	mov	r2, r0
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <simulated_temperature_data+0x6c>)
 8000362:	fb83 1302 	smull	r1, r3, r3, r2
 8000366:	4413      	add	r3, r2
 8000368:	1119      	asrs	r1, r3, #4
 800036a:	17d3      	asrs	r3, r2, #31
 800036c:	1ac9      	subs	r1, r1, r3
 800036e:	460b      	mov	r3, r1
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	1a5b      	subs	r3, r3, r1
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	1ad1      	subs	r1, r2, r3
 8000378:	b2cb      	uxtb	r3, r1
 800037a:	330f      	adds	r3, #15
 800037c:	b2db      	uxtb	r3, r3
 800037e:	e013      	b.n	80003a8 <simulated_temperature_data+0x64>
			case (1):return rand() % 30 + 15;
 8000380:	f000 fe00 	bl	8000f84 <rand>
 8000384:	4602      	mov	r2, r0
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <simulated_temperature_data+0x6c>)
 8000388:	fb83 1302 	smull	r1, r3, r3, r2
 800038c:	4413      	add	r3, r2
 800038e:	1119      	asrs	r1, r3, #4
 8000390:	17d3      	asrs	r3, r2, #31
 8000392:	1ac9      	subs	r1, r1, r3
 8000394:	460b      	mov	r3, r1
 8000396:	011b      	lsls	r3, r3, #4
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	1ad1      	subs	r1, r2, r3
 800039e:	b2cb      	uxtb	r3, r1
 80003a0:	330f      	adds	r3, #15
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	e000      	b.n	80003a8 <simulated_temperature_data+0x64>
			default: return 0;
 80003a6:	2300      	movs	r3, #0
		}

}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	88888889 	.word	0x88888889

080003b4 <simulated_light_data>:

uint16_t simulated_light_data(uint8_t pin)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	switch(pin)
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <simulated_light_data+0x16>
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d013      	beq.n	80003f0 <simulated_light_data+0x3c>
 80003c8:	e025      	b.n	8000416 <simulated_light_data+0x62>
	{
		case (0):return rand() % 900 + 100; // from 100 to 999
 80003ca:	f000 fddb 	bl	8000f84 <rand>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <simulated_light_data+0x6c>)
 80003d2:	fb82 1203 	smull	r1, r2, r2, r3
 80003d6:	441a      	add	r2, r3
 80003d8:	1251      	asrs	r1, r2, #9
 80003da:	17da      	asrs	r2, r3, #31
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	f44f 7161 	mov.w	r1, #900	; 0x384
 80003e2:	fb01 f202 	mul.w	r2, r1, r2
 80003e6:	1a9a      	subs	r2, r3, r2
 80003e8:	b293      	uxth	r3, r2
 80003ea:	3364      	adds	r3, #100	; 0x64
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	e013      	b.n	8000418 <simulated_light_data+0x64>
		case (1):return rand() % 900 + 100;
 80003f0:	f000 fdc8 	bl	8000f84 <rand>
 80003f4:	4603      	mov	r3, r0
 80003f6:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <simulated_light_data+0x6c>)
 80003f8:	fb82 1203 	smull	r1, r2, r2, r3
 80003fc:	441a      	add	r2, r3
 80003fe:	1251      	asrs	r1, r2, #9
 8000400:	17da      	asrs	r2, r3, #31
 8000402:	1a8a      	subs	r2, r1, r2
 8000404:	f44f 7161 	mov.w	r1, #900	; 0x384
 8000408:	fb01 f202 	mul.w	r2, r1, r2
 800040c:	1a9a      	subs	r2, r3, r2
 800040e:	b293      	uxth	r3, r2
 8000410:	3364      	adds	r3, #100	; 0x64
 8000412:	b29b      	uxth	r3, r3
 8000414:	e000      	b.n	8000418 <simulated_light_data+0x64>
		default: return 0;
 8000416:	2300      	movs	r3, #0
	}

}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	91a2b3c5 	.word	0x91a2b3c5

08000424 <trigger_notification>:
#include "notification.h"
#include "time_stamped_state_data.h"

/*API for triggering notification based on the occurrence threshold of the plant profile*/
void trigger_notification(volatile Occurence_count_Struct* state_occurence_count)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
   /* Looping over the number of total indoor plants available */
   for(uint8_t plant_idd = 0; plant_idd < PLANTS ; plant_idd++)
 800042c:	2300      	movs	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]
 8000430:	e029      	b.n	8000486 <trigger_notification+0x62>
   {
	   if(state_occurence_count[plant_idd].plant_moist_range_count >= NOTIFY_THRESHOLD)
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	785b      	ldrb	r3, [r3, #1]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b13      	cmp	r3, #19
 8000440:	d904      	bls.n	800044c <trigger_notification+0x28>
	   {
		   printf(">>ALERT: Moisture is LOW : Plant%d needs attention!\n",plant_idd);
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	4619      	mov	r1, r3
 8000446:	4814      	ldr	r0, [pc, #80]	; (8000498 <trigger_notification+0x74>)
 8000448:	f000 fe9c 	bl	8001184 <iprintf>
	   }
	   if(state_occurence_count[plant_idd].plant_temp_range_count >= NOTIFY_THRESHOLD)
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b13      	cmp	r3, #19
 800045a:	d904      	bls.n	8000466 <trigger_notification+0x42>
	   {
	   		printf(">>ALERT: Temperature is HIGH : Plant%d needs attention!\n",plant_idd);
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	4619      	mov	r1, r3
 8000460:	480e      	ldr	r0, [pc, #56]	; (800049c <trigger_notification+0x78>)
 8000462:	f000 fe8f 	bl	8001184 <iprintf>
	   }
	   if(state_occurence_count[plant_idd].plant_light_range_count >= NOTIFY_THRESHOLD)
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b13      	cmp	r3, #19
 8000474:	d904      	bls.n	8000480 <trigger_notification+0x5c>
	   {
	   		printf(">>ALERT: Light Intensity is LOW : Plant%d needs attention!\n",plant_idd);
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	4619      	mov	r1, r3
 800047a:	4809      	ldr	r0, [pc, #36]	; (80004a0 <trigger_notification+0x7c>)
 800047c:	f000 fe82 	bl	8001184 <iprintf>
   for(uint8_t plant_idd = 0; plant_idd < PLANTS ; plant_idd++)
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	3301      	adds	r3, #1
 8000484:	73fb      	strb	r3, [r7, #15]
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d9d2      	bls.n	8000432 <trigger_notification+0xe>
	   }
   }

}
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	08001f90 	.word	0x08001f90
 800049c:	08001fc8 	.word	0x08001fc8
 80004a0:	08002004 	.word	0x08002004

080004a4 <state_classifier_8_bit>:

extern volatile uint8_t max_size;

/* API for classifying the state of the 8-bit sensor data using binary search algorithm  */
int8_t state_classifier_8_bit(const uint8_t* thresholds,uint8_t sensor_data)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]

	int8_t low  = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
    int8_t high = max_size - 2;
 80004b4:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <state_classifier_8_bit+0xc4>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	3b02      	subs	r3, #2
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	73bb      	strb	r3, [r7, #14]


    while(low <= high)
 80004c0:	e02a      	b.n	8000518 <state_classifier_8_bit+0x74>
    {
    	uint8_t mid  = (low + high)/2;
 80004c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80004ca:	4413      	add	r3, r2
 80004cc:	0fda      	lsrs	r2, r3, #31
 80004ce:	4413      	add	r3, r2
 80004d0:	105b      	asrs	r3, r3, #1
 80004d2:	737b      	strb	r3, [r7, #13]
    	if(sensor_data >= thresholds[mid] && sensor_data<= (thresholds[mid+1]-1))
 80004d4:	7b7b      	ldrb	r3, [r7, #13]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	78fa      	ldrb	r2, [r7, #3]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d30a      	bcc.n	80004f8 <state_classifier_8_bit+0x54>
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
 80004e4:	3301      	adds	r3, #1
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	78fa      	ldrb	r2, [r7, #3]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d202      	bcs.n	80004f8 <state_classifier_8_bit+0x54>
    	{
    		return mid;
 80004f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004f6:	e032      	b.n	800055e <state_classifier_8_bit+0xba>
    	}
    	else if(sensor_data <= thresholds[mid])
 80004f8:	7b7b      	ldrb	r3, [r7, #13]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	78fa      	ldrb	r2, [r7, #3]
 8000502:	429a      	cmp	r2, r3
 8000504:	d804      	bhi.n	8000510 <state_classifier_8_bit+0x6c>
    	{
    		high = mid - 1;
 8000506:	7b7b      	ldrb	r3, [r7, #13]
 8000508:	3b01      	subs	r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	73bb      	strb	r3, [r7, #14]
 800050e:	e003      	b.n	8000518 <state_classifier_8_bit+0x74>
    	}
    	else
    	{
    		low  = mid + 1;
 8000510:	7b7b      	ldrb	r3, [r7, #13]
 8000512:	3301      	adds	r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	73fb      	strb	r3, [r7, #15]
    while(low <= high)
 8000518:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800051c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000520:	429a      	cmp	r2, r3
 8000522:	ddce      	ble.n	80004c2 <state_classifier_8_bit+0x1e>
    	}

    }
    if(sensor_data >= thresholds[max_size-2] && sensor_data <= thresholds[max_size-1])
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <state_classifier_8_bit+0xc4>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	3b02      	subs	r3, #2
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	78fa      	ldrb	r2, [r7, #3]
 8000534:	429a      	cmp	r2, r3
 8000536:	d310      	bcc.n	800055a <state_classifier_8_bit+0xb6>
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <state_classifier_8_bit+0xc4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	3b01      	subs	r3, #1
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4413      	add	r3, r2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	78fa      	ldrb	r2, [r7, #3]
 8000548:	429a      	cmp	r2, r3
 800054a:	d806      	bhi.n	800055a <state_classifier_8_bit+0xb6>
    {
    	return max_size-2;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <state_classifier_8_bit+0xc4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	3b02      	subs	r3, #2
 8000554:	b2db      	uxtb	r3, r3
 8000556:	b25b      	sxtb	r3, r3
 8000558:	e001      	b.n	800055e <state_classifier_8_bit+0xba>
    }
    return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000050 	.word	0x20000050

0800056c <state_classifier_16_bit>:

/* API for classifying the state of the 16-bit sensor data using binary search algorithm  */
int8_t state_classifier_16_bit(const uint16_t* thresholds,uint16_t sensor_data)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]

	int8_t low  = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
    int8_t high = max_size - 2;
 800057c:	4b31      	ldr	r3, [pc, #196]	; (8000644 <state_classifier_16_bit+0xd8>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	3b02      	subs	r3, #2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	73bb      	strb	r3, [r7, #14]


    while(low <= high)
 8000588:	e02d      	b.n	80005e6 <state_classifier_16_bit+0x7a>
    {
    	uint8_t mid  = (low + high)/2;
 800058a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800058e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000592:	4413      	add	r3, r2
 8000594:	0fda      	lsrs	r2, r3, #31
 8000596:	4413      	add	r3, r2
 8000598:	105b      	asrs	r3, r3, #1
 800059a:	737b      	strb	r3, [r7, #13]
    	if(sensor_data >= thresholds[mid] && sensor_data<= (thresholds[mid+1]-1))
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	887a      	ldrh	r2, [r7, #2]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d30b      	bcc.n	80005c4 <state_classifier_16_bit+0x58>
 80005ac:	7b7b      	ldrb	r3, [r7, #13]
 80005ae:	3301      	adds	r3, #1
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	887a      	ldrh	r2, [r7, #2]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d202      	bcs.n	80005c4 <state_classifier_16_bit+0x58>
    	{
    		return mid;
 80005be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005c2:	e039      	b.n	8000638 <state_classifier_16_bit+0xcc>
    	}
    	else if(sensor_data <= thresholds[mid])
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	887a      	ldrh	r2, [r7, #2]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d804      	bhi.n	80005de <state_classifier_16_bit+0x72>
    	{
    		high = mid - 1;
 80005d4:	7b7b      	ldrb	r3, [r7, #13]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	e003      	b.n	80005e6 <state_classifier_16_bit+0x7a>
    	}
    	else
    	{
    		low  = mid + 1;
 80005de:	7b7b      	ldrb	r3, [r7, #13]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	73fb      	strb	r3, [r7, #15]
    while(low <= high)
 80005e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	ddcb      	ble.n	800058a <state_classifier_16_bit+0x1e>
    	}

    }
    if(sensor_data >= thresholds[max_size-2] && sensor_data <= thresholds[max_size-1])
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <state_classifier_16_bit+0xd8>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80005fc:	3b02      	subs	r3, #2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	887a      	ldrh	r2, [r7, #2]
 8000608:	429a      	cmp	r2, r3
 800060a:	d313      	bcc.n	8000634 <state_classifier_16_bit+0xc8>
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <state_classifier_16_bit+0xd8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000616:	3b01      	subs	r3, #1
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	887a      	ldrh	r2, [r7, #2]
 8000622:	429a      	cmp	r2, r3
 8000624:	d806      	bhi.n	8000634 <state_classifier_16_bit+0xc8>
    {
        return max_size-2;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <state_classifier_16_bit+0xd8>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	3b02      	subs	r3, #2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	b25b      	sxtb	r3, r3
 8000632:	e001      	b.n	8000638 <state_classifier_16_bit+0xcc>
    }
    return -1;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000050 	.word	0x20000050

08000648 <print_time_stamped_data>:

Time_stamped_data_Struct time_stamped_db[MAX_RECORDS];

/* API for adaptive pattern matching or to find the current plant profile based on the history of records */
void print_time_stamped_data(Time_stamped_data_Struct* pointerdb,volatile Occurence_count_Struct* pPlant_state_pattern_count)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]

	uint8_t moist_occurence_counter0 = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
	uint8_t temp_occurence_counter0 = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
	uint8_t light_occurence_counter0 = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]

	uint8_t moist_occurence_counter1 = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]
	uint8_t temp_occurence_counter1 = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	74fb      	strb	r3, [r7, #19]
	uint8_t light_occurence_counter1 = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	74bb      	strb	r3, [r7, #18]

	uint16_t current_time           = pointerdb[MAX_RECORDS-1].total_time_in_sec;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8000670:	338c      	adds	r3, #140	; 0x8c
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	81fb      	strh	r3, [r7, #14]

	for(uint16_t i= 0; i < MAX_RECORDS; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	823b      	strh	r3, [r7, #16]
 800067a:	e0aa      	b.n	80007d2 <print_time_stamped_data+0x18a>
//			   time_stamped_db[i].time_stamped_light_state);

	   /* Condition to check the latest records in the specified time window and it will ignore the older records
	    * which will enable adaptive pattern recognition based on the latest records.
	    */
	   if((current_time - time_stamped_db[i].total_time_in_sec) <= TIME_WINDOW)
 800067c:	89fa      	ldrh	r2, [r7, #14]
 800067e:	8a3b      	ldrh	r3, [r7, #16]
 8000680:	4963      	ldr	r1, [pc, #396]	; (8000810 <print_time_stamped_data+0x1c8>)
 8000682:	2054      	movs	r0, #84	; 0x54
 8000684:	fb00 f303 	mul.w	r3, r0, r3
 8000688:	440b      	add	r3, r1
 800068a:	3304      	adds	r3, #4
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	2bf0      	cmp	r3, #240	; 0xf0
 8000692:	f200 809b 	bhi.w	80007cc <print_time_stamped_data+0x184>
       {
          if(time_stamped_db[i].time_stamped_plant_id == 0)
 8000696:	8a3b      	ldrh	r3, [r7, #16]
 8000698:	4a5d      	ldr	r2, [pc, #372]	; (8000810 <print_time_stamped_data+0x1c8>)
 800069a:	2154      	movs	r1, #84	; 0x54
 800069c:	fb01 f303 	mul.w	r3, r1, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d144      	bne.n	8000732 <print_time_stamped_data+0xea>
          {
        	  if((strcmp(time_stamped_db[i].time_stamped_moist_state, "LOW")==0))
 80006a8:	8a3b      	ldrh	r3, [r7, #16]
 80006aa:	2254      	movs	r2, #84	; 0x54
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	3308      	adds	r3, #8
 80006b2:	4a57      	ldr	r2, [pc, #348]	; (8000810 <print_time_stamped_data+0x1c8>)
 80006b4:	4413      	add	r3, r2
 80006b6:	4957      	ldr	r1, [pc, #348]	; (8000814 <print_time_stamped_data+0x1cc>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd89 	bl	80001d0 <strcmp>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <print_time_stamped_data+0x82>
        	  {
        		  moist_occurence_counter0++;
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	3301      	adds	r3, #1
 80006c8:	75fb      	strb	r3, [r7, #23]
        	  }
        	  if((strcmp(time_stamped_db[i].time_stamped_temp_state, "HIGH")== 0) ||
 80006ca:	8a3b      	ldrh	r3, [r7, #16]
 80006cc:	2254      	movs	r2, #84	; 0x54
 80006ce:	fb02 f303 	mul.w	r3, r2, r3
 80006d2:	3320      	adds	r3, #32
 80006d4:	4a4e      	ldr	r2, [pc, #312]	; (8000810 <print_time_stamped_data+0x1c8>)
 80006d6:	4413      	add	r3, r2
 80006d8:	3301      	adds	r3, #1
 80006da:	494f      	ldr	r1, [pc, #316]	; (8000818 <print_time_stamped_data+0x1d0>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd77 	bl	80001d0 <strcmp>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00e      	beq.n	8000706 <print_time_stamped_data+0xbe>
        	    (strcmp(time_stamped_db[i].time_stamped_temp_state, "VERY HIGH")==0))
 80006e8:	8a3b      	ldrh	r3, [r7, #16]
 80006ea:	2254      	movs	r2, #84	; 0x54
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	3320      	adds	r3, #32
 80006f2:	4a47      	ldr	r2, [pc, #284]	; (8000810 <print_time_stamped_data+0x1c8>)
 80006f4:	4413      	add	r3, r2
 80006f6:	3301      	adds	r3, #1
 80006f8:	4948      	ldr	r1, [pc, #288]	; (800081c <print_time_stamped_data+0x1d4>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd68 	bl	80001d0 <strcmp>
 8000700:	4603      	mov	r3, r0
        	  if((strcmp(time_stamped_db[i].time_stamped_temp_state, "HIGH")== 0) ||
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <print_time_stamped_data+0xc4>
        	  {
        		  temp_occurence_counter0++;
 8000706:	7dbb      	ldrb	r3, [r7, #22]
 8000708:	3301      	adds	r3, #1
 800070a:	75bb      	strb	r3, [r7, #22]
        	  }
        	  if((strcmp(time_stamped_db[i].time_stamped_light_state,"LOW")==0))
 800070c:	8a3b      	ldrh	r3, [r7, #16]
 800070e:	2254      	movs	r2, #84	; 0x54
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	3338      	adds	r3, #56	; 0x38
 8000716:	4a3e      	ldr	r2, [pc, #248]	; (8000810 <print_time_stamped_data+0x1c8>)
 8000718:	4413      	add	r3, r2
 800071a:	3302      	adds	r3, #2
 800071c:	493d      	ldr	r1, [pc, #244]	; (8000814 <print_time_stamped_data+0x1cc>)
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd56 	bl	80001d0 <strcmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d150      	bne.n	80007cc <print_time_stamped_data+0x184>
        	  {
        		  light_occurence_counter0++;
 800072a:	7d7b      	ldrb	r3, [r7, #21]
 800072c:	3301      	adds	r3, #1
 800072e:	757b      	strb	r3, [r7, #21]
 8000730:	e04c      	b.n	80007cc <print_time_stamped_data+0x184>
        	  }
          }

          else if(time_stamped_db[i].time_stamped_plant_id == 1)
 8000732:	8a3b      	ldrh	r3, [r7, #16]
 8000734:	4a36      	ldr	r2, [pc, #216]	; (8000810 <print_time_stamped_data+0x1c8>)
 8000736:	2154      	movs	r1, #84	; 0x54
 8000738:	fb01 f303 	mul.w	r3, r1, r3
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d143      	bne.n	80007cc <print_time_stamped_data+0x184>
          {
        	 if((strcmp(time_stamped_db[i].time_stamped_moist_state, "LOW")==0))
 8000744:	8a3b      	ldrh	r3, [r7, #16]
 8000746:	2254      	movs	r2, #84	; 0x54
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	3308      	adds	r3, #8
 800074e:	4a30      	ldr	r2, [pc, #192]	; (8000810 <print_time_stamped_data+0x1c8>)
 8000750:	4413      	add	r3, r2
 8000752:	4930      	ldr	r1, [pc, #192]	; (8000814 <print_time_stamped_data+0x1cc>)
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd3b 	bl	80001d0 <strcmp>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <print_time_stamped_data+0x11e>
			  {
				  moist_occurence_counter1++;
 8000760:	7d3b      	ldrb	r3, [r7, #20]
 8000762:	3301      	adds	r3, #1
 8000764:	753b      	strb	r3, [r7, #20]
			  }
			  if((strcmp(time_stamped_db[i].time_stamped_temp_state, "HIGH")== 0) ||
 8000766:	8a3b      	ldrh	r3, [r7, #16]
 8000768:	2254      	movs	r2, #84	; 0x54
 800076a:	fb02 f303 	mul.w	r3, r2, r3
 800076e:	3320      	adds	r3, #32
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <print_time_stamped_data+0x1c8>)
 8000772:	4413      	add	r3, r2
 8000774:	3301      	adds	r3, #1
 8000776:	4928      	ldr	r1, [pc, #160]	; (8000818 <print_time_stamped_data+0x1d0>)
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd29 	bl	80001d0 <strcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00e      	beq.n	80007a2 <print_time_stamped_data+0x15a>
				(strcmp(time_stamped_db[i].time_stamped_temp_state, "VERY_HIGH")==0))
 8000784:	8a3b      	ldrh	r3, [r7, #16]
 8000786:	2254      	movs	r2, #84	; 0x54
 8000788:	fb02 f303 	mul.w	r3, r2, r3
 800078c:	3320      	adds	r3, #32
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <print_time_stamped_data+0x1c8>)
 8000790:	4413      	add	r3, r2
 8000792:	3301      	adds	r3, #1
 8000794:	4922      	ldr	r1, [pc, #136]	; (8000820 <print_time_stamped_data+0x1d8>)
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd1a 	bl	80001d0 <strcmp>
 800079c:	4603      	mov	r3, r0
			  if((strcmp(time_stamped_db[i].time_stamped_temp_state, "HIGH")== 0) ||
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <print_time_stamped_data+0x160>
			  {
				  temp_occurence_counter1++;
 80007a2:	7cfb      	ldrb	r3, [r7, #19]
 80007a4:	3301      	adds	r3, #1
 80007a6:	74fb      	strb	r3, [r7, #19]
			  }
			  if((strcmp(time_stamped_db[i].time_stamped_light_state,"LOW")==0))
 80007a8:	8a3b      	ldrh	r3, [r7, #16]
 80007aa:	2254      	movs	r2, #84	; 0x54
 80007ac:	fb02 f303 	mul.w	r3, r2, r3
 80007b0:	3338      	adds	r3, #56	; 0x38
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <print_time_stamped_data+0x1c8>)
 80007b4:	4413      	add	r3, r2
 80007b6:	3302      	adds	r3, #2
 80007b8:	4916      	ldr	r1, [pc, #88]	; (8000814 <print_time_stamped_data+0x1cc>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd08 	bl	80001d0 <strcmp>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d102      	bne.n	80007cc <print_time_stamped_data+0x184>
			  {
				  light_occurence_counter1++;
 80007c6:	7cbb      	ldrb	r3, [r7, #18]
 80007c8:	3301      	adds	r3, #1
 80007ca:	74bb      	strb	r3, [r7, #18]
	for(uint16_t i= 0; i < MAX_RECORDS; i++)
 80007cc:	8a3b      	ldrh	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	823b      	strh	r3, [r7, #16]
 80007d2:	8a3b      	ldrh	r3, [r7, #16]
 80007d4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80007d8:	f4ff af50 	bcc.w	800067c <print_time_stamped_data+0x34>
       }

   }

	/* storing the data to a array of structure */
	pPlant_state_pattern_count[0].plant_moist_range_count = moist_occurence_counter0;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	7dfa      	ldrb	r2, [r7, #23]
 80007e0:	705a      	strb	r2, [r3, #1]
	pPlant_state_pattern_count[0].plant_temp_range_count  = temp_occurence_counter0;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	7dba      	ldrb	r2, [r7, #22]
 80007e6:	709a      	strb	r2, [r3, #2]
	pPlant_state_pattern_count[0].plant_light_range_count = light_occurence_counter0;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	7d7a      	ldrb	r2, [r7, #21]
 80007ec:	70da      	strb	r2, [r3, #3]

	pPlant_state_pattern_count[1].plant_moist_range_count = moist_occurence_counter1;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	3304      	adds	r3, #4
 80007f2:	7d3a      	ldrb	r2, [r7, #20]
 80007f4:	705a      	strb	r2, [r3, #1]
	pPlant_state_pattern_count[1].plant_temp_range_count  = temp_occurence_counter1;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3304      	adds	r3, #4
 80007fa:	7cfa      	ldrb	r2, [r7, #19]
 80007fc:	709a      	strb	r2, [r3, #2]
	pPlant_state_pattern_count[1].plant_light_range_count = light_occurence_counter1;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3304      	adds	r3, #4
 8000802:	7cba      	ldrb	r2, [r7, #18]
 8000804:	70da      	strb	r2, [r3, #3]

}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000cc 	.word	0x200000cc
 8000814:	08002040 	.word	0x08002040
 8000818:	08002044 	.word	0x08002044
 800081c:	0800204c 	.word	0x0800204c
 8000820:	08002058 	.word	0x08002058

08000824 <SysTick_Init>:

__vo uint32_t systick_timer = 0;

/* Enabling systick counter functionlity */
void SysTick_Init(uint32_t ticks)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    SYST_RVR = ticks - 1;              // Set reload register
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <SysTick_Init+0x28>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3b01      	subs	r3, #1
 8000832:	6013      	str	r3, [r2, #0]
    SYST_CVR = 0;                      // Reset current value register
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SysTick_Init+0x2c>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
    SYST_CSR = 0x05;                   // Enable SysTick, use processor clock
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SysTick_Init+0x30>)
 800083c:	2205      	movs	r2, #5
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e014 	.word	0xe000e014
 8000850:	e000e018 	.word	0xe000e018
 8000854:	e000e010 	.word	0xe000e010

08000858 <delay_ms>:

/* API to produce 1 second delay,which will also increment systick_timer to 1 second-
 *  which is important for generating current time.
 */
void delay_ms(uint32_t ms)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e012      	b.n	800088c <delay_ms+0x34>
    {
        SysTick_Init(16000); // assuming 16 MHz clock -> 1ms
 8000866:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800086a:	f7ff ffdb 	bl	8000824 <SysTick_Init>
        while ((SYST_CSR & (1 << 16)) == 0); // Wait until COUNTFLAG is set
 800086e:	bf00      	nop
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <delay_ms+0x48>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0f9      	beq.n	8000870 <delay_ms+0x18>
        systick_timer++;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <delay_ms+0x4c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <delay_ms+0x4c>)
 8000884:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < ms; i++)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3301      	adds	r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d3e8      	bcc.n	8000866 <delay_ms+0xe>
    }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010
 80008a4:	2000c5ac 	.word	0x2000c5ac

080008a8 <log_current_time>:

/* API for generating current time when it is called-for storing time stamped data */
void log_current_time(Current_time_Struct* cur_time_data,uint32_t systick_timer)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    uint32_t total_seconds = systick_timer/1000;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <log_current_time+0x80>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	099b      	lsrs	r3, r3, #6
 80008bc:	60fb      	str	r3, [r7, #12]

    cur_time_data->hour         = (total_seconds/3600)%24;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4a1a      	ldr	r2, [pc, #104]	; (800092c <log_current_time+0x84>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0ad9      	lsrs	r1, r3, #11
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <log_current_time+0x88>)
 80008ca:	fba3 2301 	umull	r2, r3, r3, r1
 80008ce:	091a      	lsrs	r2, r3, #4
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	1aca      	subs	r2, r1, r3
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	701a      	strb	r2, [r3, #0]
    cur_time_data->minute       = (total_seconds/60)%60;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <log_current_time+0x8c>)
 80008e4:	fba2 2303 	umull	r2, r3, r2, r3
 80008e8:	0959      	lsrs	r1, r3, #5
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <log_current_time+0x8c>)
 80008ec:	fba3 2301 	umull	r2, r3, r3, r1
 80008f0:	095a      	lsrs	r2, r3, #5
 80008f2:	4613      	mov	r3, r2
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	1aca      	subs	r2, r1, r3
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	705a      	strb	r2, [r3, #1]
    cur_time_data->second       =  total_seconds%60;
 8000902:	68f9      	ldr	r1, [r7, #12]
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <log_current_time+0x8c>)
 8000906:	fba3 2301 	umull	r2, r3, r3, r1
 800090a:	095a      	lsrs	r2, r3, #5
 800090c:	4613      	mov	r3, r2
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	1aca      	subs	r2, r1, r3
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	709a      	strb	r2, [r3, #2]

}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	10624dd3 	.word	0x10624dd3
 800092c:	91a2b3c5 	.word	0x91a2b3c5
 8000930:	aaaaaaab 	.word	0xaaaaaaab
 8000934:	88888889 	.word	0x88888889

08000938 <gpio_init>:

#include "stm32f407_xx_MemMap.h"

/* ToDo: Can be utilized if need to use printf using UART protocol */
void gpio_init(GPIO_Handle_Struct* pGpiox)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    /* Enabling GPIOA peripheral */
	GPIOA_CLK_EN();
 8000940:	4b49      	ldr	r3, [pc, #292]	; (8000a68 <gpio_init+0x130>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a48      	ldr	r2, [pc, #288]	; (8000a68 <gpio_init+0x130>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6313      	str	r3, [r2, #48]	; 0x30

	/* MODER configuration */
	pGpiox->pGpio->MODER &= ~(3 << ((pGpiox->gpio_user_cfg.pin_number)*2));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2103      	movs	r1, #3
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	400a      	ands	r2, r1
 8000968:	601a      	str	r2, [r3, #0]
	pGpiox->pGpio->MODER |= (GPIO_ALT_FUNC_MODE << ((pGpiox->gpio_user_cfg.pin_number)*2));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2102      	movs	r1, #2
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	4619      	mov	r1, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]

	/* OTYPE Configuration */
	pGpiox->pGpio->OTYPER &= ~(1 << (pGpiox->gpio_user_cfg.pin_number));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	795b      	ldrb	r3, [r3, #5]
 8000990:	4619      	mov	r1, r3
 8000992:	2301      	movs	r3, #1
 8000994:	408b      	lsls	r3, r1
 8000996:	43db      	mvns	r3, r3
 8000998:	4619      	mov	r1, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	400a      	ands	r2, r1
 80009a0:	605a      	str	r2, [r3, #4]
	pGpiox->pGpio->OTYPER |=  (0 << (pGpiox->gpio_user_cfg.pin_number));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6852      	ldr	r2, [r2, #4]
 80009ac:	605a      	str	r2, [r3, #4]

	/* OSPEED COnfiguration */
	pGpiox->pGpio->OSPEEDR &= ~(3 << ((pGpiox->gpio_user_cfg.pin_number)*2));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	795b      	ldrb	r3, [r3, #5]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2103      	movs	r1, #3
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	4619      	mov	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	400a      	ands	r2, r1
 80009ca:	609a      	str	r2, [r3, #8]
	pGpiox->pGpio->OSPEEDR |= (GPIO_HIGH_SPEED << ((pGpiox->gpio_user_cfg.pin_number)*2));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2102      	movs	r1, #2
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	4619      	mov	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	430a      	orrs	r2, r1
 80009e6:	609a      	str	r2, [r3, #8]

	pGpiox->pGpio->PUPDR   &= ~(3 << ((pGpiox->gpio_user_cfg.pin_number)*2));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2103      	movs	r1, #3
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	400a      	ands	r2, r1
 8000a04:	60da      	str	r2, [r3, #12]
	pGpiox->pGpio->PUPDR   |=  (GPIO_PIN_PU << ((pGpiox->gpio_user_cfg.pin_number)*2));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	795b      	ldrb	r3, [r3, #5]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	60da      	str	r2, [r3, #12]

	/* AFR configuration */
	pGpiox->pGpio->AFR[0]  &= ~(15 << ((pGpiox->gpio_user_cfg.pin_number)*4));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6a1a      	ldr	r2, [r3, #32]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	795b      	ldrb	r3, [r3, #5]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	210f      	movs	r1, #15
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	400a      	ands	r2, r1
 8000a3e:	621a      	str	r2, [r3, #32]
	pGpiox->pGpio->AFR[0]  |= (7 << ((pGpiox->gpio_user_cfg.pin_number)*4));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6a1a      	ldr	r2, [r3, #32]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	795b      	ldrb	r3, [r3, #5]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	4619      	mov	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	621a      	str	r2, [r3, #32]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <usart_init>:

void usart_init(USART_RegDef_Struct* usart2)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	USART2_CLK_EN();
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <usart_init+0x64>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a15      	ldr	r2, [pc, #84]	; (8000ad0 <usart_init+0x64>)
 8000a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40

	usart2->USART_BRR = ((0x0111 << 4) | 0x7); //BRR is not modified ,its written clearly and precisely.
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f241 1217 	movw	r2, #4375	; 0x1117
 8000a86:	609a      	str	r2, [r3, #8]
	usart2->USART_BRR = 0x23;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2223      	movs	r2, #35	; 0x23
 8000a8c:	609a      	str	r2, [r3, #8]
	usart2->USART_CR1 = 0;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    usart2->USART_CR2 = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
    usart2->USART_CR3 = 0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
    usart2->USART_CR1 |= (1 << 3);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	f043 0208 	orr.w	r2, r3, #8
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60da      	str	r2, [r3, #12]
    usart2->USART_CR1 |= (1 << 2);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	f043 0204 	orr.w	r2, r3, #4
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60da      	str	r2, [r3, #12]
    usart2->USART_CR1 |= (1 << 13);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]

}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <main>:
{
	for(volatile uint32_t i = 0; i < 100000; ++i);
}

int main(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b099      	sub	sp, #100	; 0x64
 8000ad8:	af00      	add	r7, sp, #0
	__vo uint16_t index  = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	/* ToDo: To enable printf using UART protocol over GPIO PIN 2 */
	/* GPIO Alternate Functionality Initiation*/
	GPIO_Handle_Struct gpio_uart;

	gpio_uart.pGpio = GPIOA;
 8000ae0:	4b9a      	ldr	r3, [pc, #616]	; (8000d4c <main+0x278>)
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_uart.gpio_user_cfg.pin_number  = GPIO_PIN_2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	gpio_uart.gpio_user_cfg.pin_mode    = GPIO_ALT_FUNC_MODE;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	gpio_uart.gpio_user_cfg.pin_otype   = GPIO_PIN_PUSH_PULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	gpio_uart.gpio_user_cfg.pin_ospeed  = GPIO_HIGH_SPEED;
 8000af6:	2302      	movs	r3, #2
 8000af8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	gpio_init(&gpio_uart);
 8000afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff19 	bl	8000938 <gpio_init>

	/* USART Initialization */
	USART_RegDef_Struct *usart = USART2;
 8000b06:	4b92      	ldr	r3, [pc, #584]	; (8000d50 <main+0x27c>)
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
    usart_init(usart);
 8000b0a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000b0c:	f7ff ffae 	bl	8000a6c <usart_init>

    /* For Sensor data Range Calculation */
	const char* Sensor_data_current_status[] = {"LOW","MODERATE","HIGH","VERY HIGH"};
 8000b10:	4b90      	ldr	r3, [pc, #576]	; (8000d54 <main+0x280>)
 8000b12:	f107 041c 	add.w	r4, r7, #28
 8000b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Loop forever */
	while(1)
	{
	  /* Looping over total number of indoor plants available */
	  for(uint8_t plant_id=0;plant_id < PLANTS;plant_id++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000b22:	e10c      	b.n	8000d3e <main+0x26a>
	  {
          /*To set the index to zero once it reaches the max records */
		  if(index >= MAX_RECORDS)
 8000b24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000b2e:	d302      	bcc.n	8000b36 <main+0x62>
		  {
			  index  = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		  }

		  /* systick counter is activated and it will increment the "systick_timer" to 1 second on each loop */
		  extern __vo uint32_t systick_timer;
		  delay_ms(1000);
 8000b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3a:	f7ff fe8d 	bl	8000858 <delay_ms>
          /* structure instance declaration */
		  Sensor_data_Struct sensor_data;
		  Current_time_Struct cur_time_data;

          /* API for fetching the simulated sensor data */
		  sensor_data_plant(plant_id, &sensor_data);
 8000b3e:	1d3a      	adds	r2, r7, #4
 8000b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fba2 	bl	8000290 <sensor_data_plant>

		  uint8_t soil_moisture_data      = sensor_data.moisture_data;
 8000b4c:	7e3b      	ldrb	r3, [r7, #24]
 8000b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		  uint8_t room_tempearture_data   = sensor_data.temp_data;
 8000b52:	7e7b      	ldrb	r3, [r7, #25]
 8000b54:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		  uint16_t room_light_data        = sensor_data.light_data;
 8000b58:	8b7b      	ldrh	r3, [r7, #26]
 8000b5a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54


		  /* Classifying the range for the fetched simulated sensor data */
		  const char* moisture_current_state = Sensor_data_current_status[state_classifier_8_bit(plant_profile_db[plant_id].moisture_thresholds,soil_moisture_data)];
 8000b5e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	3310      	adds	r3, #16
 8000b6c:	4a7a      	ldr	r2, [pc, #488]	; (8000d58 <main+0x284>)
 8000b6e:	4413      	add	r3, r2
 8000b70:	3304      	adds	r3, #4
 8000b72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fc93 	bl	80004a4 <state_classifier_8_bit>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	3360      	adds	r3, #96	; 0x60
 8000b84:	443b      	add	r3, r7
 8000b86:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000b8a:	653b      	str	r3, [r7, #80]	; 0x50
		  const char* temp_current_state     = Sensor_data_current_status[state_classifier_8_bit(plant_profile_db[plant_id].temp_thresholds, room_tempearture_data)];
 8000b8c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	3318      	adds	r3, #24
 8000b9a:	4a6f      	ldr	r2, [pc, #444]	; (8000d58 <main+0x284>)
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fc7c 	bl	80004a4 <state_classifier_8_bit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	3360      	adds	r3, #96	; 0x60
 8000bb2:	443b      	add	r3, r7
 8000bb4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  const char* light_current_state    = Sensor_data_current_status[state_classifier_16_bit(plant_profile_db[plant_id].light_intensity_thresholds, room_light_data)];
 8000bba:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	3318      	adds	r3, #24
 8000bc8:	4a63      	ldr	r2, [pc, #396]	; (8000d58 <main+0x284>)
 8000bca:	4413      	add	r3, r2
 8000bcc:	3306      	adds	r3, #6
 8000bce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fcc9 	bl	800056c <state_classifier_16_bit>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	3360      	adds	r3, #96	; 0x60
 8000be0:	443b      	add	r3, r7
 8000be2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48

		  /* For generating the current time on each loop */
          log_current_time(&cur_time_data,systick_timer);
 8000be8:	4b5c      	ldr	r3, [pc, #368]	; (8000d5c <main+0x288>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	463b      	mov	r3, r7
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe59 	bl	80008a8 <log_current_time>
          uint8_t hours   = cur_time_data.hour;
 8000bf6:	783b      	ldrb	r3, [r7, #0]
 8000bf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          uint8_t minutes = cur_time_data.minute;
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          uint8_t seconds = cur_time_data.second;
 8000c02:	78bb      	ldrb	r3, [r7, #2]
 8000c04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

          /* Logging plant id and classified simulated data in to an array of structure */
          time_stamped_db[index].time_stamped_plant_id  = plant_id;
 8000c08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4a53      	ldr	r2, [pc, #332]	; (8000d60 <main+0x28c>)
 8000c12:	2354      	movs	r3, #84	; 0x54
 8000c14:	fb01 f303 	mul.w	r3, r1, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000c1e:	701a      	strb	r2, [r3, #0]
          time_stamped_db[index].time_stamped_hour      = hours;
 8000c20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	4a4d      	ldr	r2, [pc, #308]	; (8000d60 <main+0x28c>)
 8000c2a:	2354      	movs	r3, #84	; 0x54
 8000c2c:	fb01 f303 	mul.w	r3, r1, r3
 8000c30:	4413      	add	r3, r2
 8000c32:	3301      	adds	r3, #1
 8000c34:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000c38:	701a      	strb	r2, [r3, #0]
          time_stamped_db[index].time_stamped_min       = minutes;
 8000c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	4619      	mov	r1, r3
 8000c42:	4a47      	ldr	r2, [pc, #284]	; (8000d60 <main+0x28c>)
 8000c44:	2354      	movs	r3, #84	; 0x54
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000c52:	701a      	strb	r2, [r3, #0]
          time_stamped_db[index].time_stamped_sec       = seconds;
 8000c54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <main+0x28c>)
 8000c5e:	2354      	movs	r3, #84	; 0x54
 8000c60:	fb01 f303 	mul.w	r3, r1, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	3303      	adds	r3, #3
 8000c68:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000c6c:	701a      	strb	r2, [r3, #0]
          time_stamped_db[index].total_time_in_sec      = ((hours*3600) + (minutes*60)+ seconds);
 8000c6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c72:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000c76:	fb02 f103 	mul.w	r1, r2, r3
 8000c7a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000c7e:	4613      	mov	r3, r2
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	18ca      	adds	r2, r1, r3
 8000c88:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000c92:	b292      	uxth	r2, r2
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <main+0x28c>)
 8000c9a:	2354      	movs	r3, #84	; 0x54
 8000c9c:	fb00 f303 	mul.w	r3, r0, r3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	6019      	str	r1, [r3, #0]

          /* Used strcpy as this way only strings can be compared */
          strcpy(time_stamped_db[index].time_stamped_moist_state,moisture_current_state);
 8000ca6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	2354      	movs	r3, #84	; 0x54
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <main+0x28c>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fb32 	bl	8001326 <strcpy>
          strcpy(time_stamped_db[index].time_stamped_temp_state,temp_current_state);
 8000cc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2354      	movs	r3, #84	; 0x54
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	3320      	adds	r3, #32
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <main+0x28c>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fb23 	bl	8001326 <strcpy>
          strcpy(time_stamped_db[index].time_stamped_light_state,light_current_state);
 8000ce0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	2354      	movs	r3, #84	; 0x54
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	3338      	adds	r3, #56	; 0x38
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <main+0x28c>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fb14 	bl	8001326 <strcpy>

          /* Condition to check current plant profile
           * (sensor data/current profile condition of the plant) in the specified time window.
           * This is part of the adaptive pattern learning.
          */
          if(index == MAX_RECORDS-1)
 8000cfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	f240 2257 	movw	r2, #599	; 0x257
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d10c      	bne.n	8000d26 <main+0x252>
          {
            /* API to check current plant profile based on history or pattern within a time window */
        	print_time_stamped_data(time_stamped_db,&plant_state_pattern_count[PLANTS]);
 8000d0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d10:	3308      	adds	r3, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <main+0x28c>)
 8000d16:	f7ff fc97 	bl	8000648 <print_time_stamped_data>

        	/* API to Trigger notification if occurrence/pattern matching counter exceeds a certain threshold
        	 *
        	*/
            trigger_notification(&plant_state_pattern_count[PLANTS]);
 8000d1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d1e:	3308      	adds	r3, #8
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fb7f 	bl	8000424 <trigger_notification>
          }

          /* index increment after completing the current loop condition*/
          index++;
 8000d26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  for(uint8_t plant_id=0;plant_id < PLANTS;plant_id++)
 8000d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	f67f aeee 	bls.w	8000b24 <main+0x50>
 8000d48:	e6e8      	b.n	8000b1c <main+0x48>
 8000d4a:	bf00      	nop
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40004400 	.word	0x40004400
 8000d54:	08002088 	.word	0x08002088
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	2000c5ac 	.word	0x2000c5ac
 8000d60:	200000cc 	.word	0x200000cc

08000d64 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <ITM_SendChar+0x44>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <ITM_SendChar+0x44>)
 8000d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d78:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <ITM_SendChar+0x48>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <ITM_SendChar+0x48>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d86:	bf00      	nop
 8000d88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f8      	beq.n	8000d88 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	6013      	str	r3, [r2, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	e000edfc 	.word	0xe000edfc
 8000dac:	e0000e00 	.word	0xe0000e00

08000db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return 1;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <_kill>:

int _kill(int pid, int sig)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dc8:	f000 fa80 	bl	80012cc <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2216      	movs	r2, #22
 8000dd0:	601a      	str	r2, [r3, #0]
  return -1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_exit>:

void _exit (int status)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000de6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffe7 	bl	8000dbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8000df0:	e7fe      	b.n	8000df0 <_exit+0x12>

08000df2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e00a      	b.n	8000e1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e04:	f3af 8000 	nop.w
 8000e08:	4601      	mov	r1, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	60ba      	str	r2, [r7, #8]
 8000e10:	b2ca      	uxtb	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dbf0      	blt.n	8000e04 <_read+0x12>
  }

  return len;
 8000e22:	687b      	ldr	r3, [r7, #4]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e009      	b.n	8000e52 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	60ba      	str	r2, [r7, #8]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff8c 	bl	8000d64 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dbf1      	blt.n	8000e3e <_write+0x12>
  }
  return len;
 8000e5a:	687b      	ldr	r3, [r7, #4]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_close>:

int _close(int file)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <_isatty>:

int _isatty(int file)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea0:	2301      	movs	r3, #1
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f000 f9ea 	bl	80012cc <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20020000 	.word	0x20020000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	2000c5b0 	.word	0x2000c5b0
 8000f2c:	2000c700 	.word	0x2000c700

08000f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	; (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f5e:	f000 f9bb 	bl	80012d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f62:	f7ff fdb7 	bl	8000ad4 <main>

08000f66 <LoopForever>:

LoopForever:
  b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   r0, =_estack
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000f74:	08002180 	.word	0x08002180
  ldr r2, =_sbss
 8000f78:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000f7c:	2000c700 	.word	0x2000c700

08000f80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <rand>:
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <rand+0x5c>)
 8000f86:	b510      	push	{r4, lr}
 8000f88:	681c      	ldr	r4, [r3, #0]
 8000f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f8c:	b9b3      	cbnz	r3, 8000fbc <rand+0x38>
 8000f8e:	2018      	movs	r0, #24
 8000f90:	f000 fa3a 	bl	8001408 <malloc>
 8000f94:	4602      	mov	r2, r0
 8000f96:	6320      	str	r0, [r4, #48]	; 0x30
 8000f98:	b920      	cbnz	r0, 8000fa4 <rand+0x20>
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <rand+0x60>)
 8000f9c:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <rand+0x64>)
 8000f9e:	2152      	movs	r1, #82	; 0x52
 8000fa0:	f000 f9ca 	bl	8001338 <__assert_func>
 8000fa4:	4911      	ldr	r1, [pc, #68]	; (8000fec <rand+0x68>)
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <rand+0x6c>)
 8000fa8:	e9c0 1300 	strd	r1, r3, [r0]
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <rand+0x70>)
 8000fae:	6083      	str	r3, [r0, #8]
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	8183      	strh	r3, [r0, #12]
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <rand+0x74>)
 8000fc0:	690b      	ldr	r3, [r1, #16]
 8000fc2:	694c      	ldr	r4, [r1, #20]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <rand+0x78>)
 8000fc6:	4358      	muls	r0, r3
 8000fc8:	fb02 0004 	mla	r0, r2, r4, r0
 8000fcc:	fba3 3202 	umull	r3, r2, r3, r2
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	eb40 0002 	adc.w	r0, r0, r2
 8000fd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000fda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000fde:	bd10      	pop	{r4, pc}
 8000fe0:	200000ac 	.word	0x200000ac
 8000fe4:	08002098 	.word	0x08002098
 8000fe8:	080020af 	.word	0x080020af
 8000fec:	abcd330e 	.word	0xabcd330e
 8000ff0:	e66d1234 	.word	0xe66d1234
 8000ff4:	0005deec 	.word	0x0005deec
 8000ff8:	5851f42d 	.word	0x5851f42d
 8000ffc:	4c957f2d 	.word	0x4c957f2d

08001000 <std>:
 8001000:	2300      	movs	r3, #0
 8001002:	b510      	push	{r4, lr}
 8001004:	4604      	mov	r4, r0
 8001006:	e9c0 3300 	strd	r3, r3, [r0]
 800100a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800100e:	6083      	str	r3, [r0, #8]
 8001010:	8181      	strh	r1, [r0, #12]
 8001012:	6643      	str	r3, [r0, #100]	; 0x64
 8001014:	81c2      	strh	r2, [r0, #14]
 8001016:	6183      	str	r3, [r0, #24]
 8001018:	4619      	mov	r1, r3
 800101a:	2208      	movs	r2, #8
 800101c:	305c      	adds	r0, #92	; 0x5c
 800101e:	f000 f906 	bl	800122e <memset>
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <std+0x58>)
 8001024:	6263      	str	r3, [r4, #36]	; 0x24
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <std+0x5c>)
 8001028:	62a3      	str	r3, [r4, #40]	; 0x28
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <std+0x60>)
 800102c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <std+0x64>)
 8001030:	6323      	str	r3, [r4, #48]	; 0x30
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <std+0x68>)
 8001034:	6224      	str	r4, [r4, #32]
 8001036:	429c      	cmp	r4, r3
 8001038:	d006      	beq.n	8001048 <std+0x48>
 800103a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800103e:	4294      	cmp	r4, r2
 8001040:	d002      	beq.n	8001048 <std+0x48>
 8001042:	33d0      	adds	r3, #208	; 0xd0
 8001044:	429c      	cmp	r4, r3
 8001046:	d105      	bne.n	8001054 <std+0x54>
 8001048:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800104c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001050:	f000 b966 	b.w	8001320 <__retarget_lock_init_recursive>
 8001054:	bd10      	pop	{r4, pc}
 8001056:	bf00      	nop
 8001058:	080011a9 	.word	0x080011a9
 800105c:	080011cb 	.word	0x080011cb
 8001060:	08001203 	.word	0x08001203
 8001064:	08001227 	.word	0x08001227
 8001068:	2000c5b4 	.word	0x2000c5b4

0800106c <stdio_exit_handler>:
 800106c:	4a02      	ldr	r2, [pc, #8]	; (8001078 <stdio_exit_handler+0xc>)
 800106e:	4903      	ldr	r1, [pc, #12]	; (800107c <stdio_exit_handler+0x10>)
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <stdio_exit_handler+0x14>)
 8001072:	f000 b869 	b.w	8001148 <_fwalk_sglue>
 8001076:	bf00      	nop
 8001078:	20000054 	.word	0x20000054
 800107c:	08001c19 	.word	0x08001c19
 8001080:	20000060 	.word	0x20000060

08001084 <cleanup_stdio>:
 8001084:	6841      	ldr	r1, [r0, #4]
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <cleanup_stdio+0x34>)
 8001088:	4299      	cmp	r1, r3
 800108a:	b510      	push	{r4, lr}
 800108c:	4604      	mov	r4, r0
 800108e:	d001      	beq.n	8001094 <cleanup_stdio+0x10>
 8001090:	f000 fdc2 	bl	8001c18 <_fflush_r>
 8001094:	68a1      	ldr	r1, [r4, #8]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <cleanup_stdio+0x38>)
 8001098:	4299      	cmp	r1, r3
 800109a:	d002      	beq.n	80010a2 <cleanup_stdio+0x1e>
 800109c:	4620      	mov	r0, r4
 800109e:	f000 fdbb 	bl	8001c18 <_fflush_r>
 80010a2:	68e1      	ldr	r1, [r4, #12]
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <cleanup_stdio+0x3c>)
 80010a6:	4299      	cmp	r1, r3
 80010a8:	d004      	beq.n	80010b4 <cleanup_stdio+0x30>
 80010aa:	4620      	mov	r0, r4
 80010ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010b0:	f000 bdb2 	b.w	8001c18 <_fflush_r>
 80010b4:	bd10      	pop	{r4, pc}
 80010b6:	bf00      	nop
 80010b8:	2000c5b4 	.word	0x2000c5b4
 80010bc:	2000c61c 	.word	0x2000c61c
 80010c0:	2000c684 	.word	0x2000c684

080010c4 <global_stdio_init.part.0>:
 80010c4:	b510      	push	{r4, lr}
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <global_stdio_init.part.0+0x30>)
 80010c8:	4c0b      	ldr	r4, [pc, #44]	; (80010f8 <global_stdio_init.part.0+0x34>)
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <global_stdio_init.part.0+0x38>)
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	4620      	mov	r0, r4
 80010d0:	2200      	movs	r2, #0
 80010d2:	2104      	movs	r1, #4
 80010d4:	f7ff ff94 	bl	8001000 <std>
 80010d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80010dc:	2201      	movs	r2, #1
 80010de:	2109      	movs	r1, #9
 80010e0:	f7ff ff8e 	bl	8001000 <std>
 80010e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80010e8:	2202      	movs	r2, #2
 80010ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010ee:	2112      	movs	r1, #18
 80010f0:	f7ff bf86 	b.w	8001000 <std>
 80010f4:	2000c6ec 	.word	0x2000c6ec
 80010f8:	2000c5b4 	.word	0x2000c5b4
 80010fc:	0800106d 	.word	0x0800106d

08001100 <__sfp_lock_acquire>:
 8001100:	4801      	ldr	r0, [pc, #4]	; (8001108 <__sfp_lock_acquire+0x8>)
 8001102:	f000 b90e 	b.w	8001322 <__retarget_lock_acquire_recursive>
 8001106:	bf00      	nop
 8001108:	2000c6f5 	.word	0x2000c6f5

0800110c <__sfp_lock_release>:
 800110c:	4801      	ldr	r0, [pc, #4]	; (8001114 <__sfp_lock_release+0x8>)
 800110e:	f000 b909 	b.w	8001324 <__retarget_lock_release_recursive>
 8001112:	bf00      	nop
 8001114:	2000c6f5 	.word	0x2000c6f5

08001118 <__sinit>:
 8001118:	b510      	push	{r4, lr}
 800111a:	4604      	mov	r4, r0
 800111c:	f7ff fff0 	bl	8001100 <__sfp_lock_acquire>
 8001120:	6a23      	ldr	r3, [r4, #32]
 8001122:	b11b      	cbz	r3, 800112c <__sinit+0x14>
 8001124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001128:	f7ff bff0 	b.w	800110c <__sfp_lock_release>
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__sinit+0x28>)
 800112e:	6223      	str	r3, [r4, #32]
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__sinit+0x2c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f5      	bne.n	8001124 <__sinit+0xc>
 8001138:	f7ff ffc4 	bl	80010c4 <global_stdio_init.part.0>
 800113c:	e7f2      	b.n	8001124 <__sinit+0xc>
 800113e:	bf00      	nop
 8001140:	08001085 	.word	0x08001085
 8001144:	2000c6ec 	.word	0x2000c6ec

08001148 <_fwalk_sglue>:
 8001148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800114c:	4607      	mov	r7, r0
 800114e:	4688      	mov	r8, r1
 8001150:	4614      	mov	r4, r2
 8001152:	2600      	movs	r6, #0
 8001154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001158:	f1b9 0901 	subs.w	r9, r9, #1
 800115c:	d505      	bpl.n	800116a <_fwalk_sglue+0x22>
 800115e:	6824      	ldr	r4, [r4, #0]
 8001160:	2c00      	cmp	r4, #0
 8001162:	d1f7      	bne.n	8001154 <_fwalk_sglue+0xc>
 8001164:	4630      	mov	r0, r6
 8001166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800116a:	89ab      	ldrh	r3, [r5, #12]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d907      	bls.n	8001180 <_fwalk_sglue+0x38>
 8001170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	d003      	beq.n	8001180 <_fwalk_sglue+0x38>
 8001178:	4629      	mov	r1, r5
 800117a:	4638      	mov	r0, r7
 800117c:	47c0      	blx	r8
 800117e:	4306      	orrs	r6, r0
 8001180:	3568      	adds	r5, #104	; 0x68
 8001182:	e7e9      	b.n	8001158 <_fwalk_sglue+0x10>

08001184 <iprintf>:
 8001184:	b40f      	push	{r0, r1, r2, r3}
 8001186:	b507      	push	{r0, r1, r2, lr}
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <iprintf+0x20>)
 800118a:	ab04      	add	r3, sp, #16
 800118c:	6808      	ldr	r0, [r1, #0]
 800118e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001192:	6881      	ldr	r1, [r0, #8]
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	f000 fa13 	bl	80015c0 <_vfiprintf_r>
 800119a:	b003      	add	sp, #12
 800119c:	f85d eb04 	ldr.w	lr, [sp], #4
 80011a0:	b004      	add	sp, #16
 80011a2:	4770      	bx	lr
 80011a4:	200000ac 	.word	0x200000ac

080011a8 <__sread>:
 80011a8:	b510      	push	{r4, lr}
 80011aa:	460c      	mov	r4, r1
 80011ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b0:	f000 f868 	bl	8001284 <_read_r>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	bfab      	itete	ge
 80011b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011ba:	89a3      	ldrhlt	r3, [r4, #12]
 80011bc:	181b      	addge	r3, r3, r0
 80011be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011c2:	bfac      	ite	ge
 80011c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80011c6:	81a3      	strhlt	r3, [r4, #12]
 80011c8:	bd10      	pop	{r4, pc}

080011ca <__swrite>:
 80011ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ce:	461f      	mov	r7, r3
 80011d0:	898b      	ldrh	r3, [r1, #12]
 80011d2:	05db      	lsls	r3, r3, #23
 80011d4:	4605      	mov	r5, r0
 80011d6:	460c      	mov	r4, r1
 80011d8:	4616      	mov	r6, r2
 80011da:	d505      	bpl.n	80011e8 <__swrite+0x1e>
 80011dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e0:	2302      	movs	r3, #2
 80011e2:	2200      	movs	r2, #0
 80011e4:	f000 f83c 	bl	8001260 <_lseek_r>
 80011e8:	89a3      	ldrh	r3, [r4, #12]
 80011ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011f2:	81a3      	strh	r3, [r4, #12]
 80011f4:	4632      	mov	r2, r6
 80011f6:	463b      	mov	r3, r7
 80011f8:	4628      	mov	r0, r5
 80011fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011fe:	f000 b853 	b.w	80012a8 <_write_r>

08001202 <__sseek>:
 8001202:	b510      	push	{r4, lr}
 8001204:	460c      	mov	r4, r1
 8001206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800120a:	f000 f829 	bl	8001260 <_lseek_r>
 800120e:	1c43      	adds	r3, r0, #1
 8001210:	89a3      	ldrh	r3, [r4, #12]
 8001212:	bf15      	itete	ne
 8001214:	6560      	strne	r0, [r4, #84]	; 0x54
 8001216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800121a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800121e:	81a3      	strheq	r3, [r4, #12]
 8001220:	bf18      	it	ne
 8001222:	81a3      	strhne	r3, [r4, #12]
 8001224:	bd10      	pop	{r4, pc}

08001226 <__sclose>:
 8001226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800122a:	f000 b809 	b.w	8001240 <_close_r>

0800122e <memset>:
 800122e:	4402      	add	r2, r0
 8001230:	4603      	mov	r3, r0
 8001232:	4293      	cmp	r3, r2
 8001234:	d100      	bne.n	8001238 <memset+0xa>
 8001236:	4770      	bx	lr
 8001238:	f803 1b01 	strb.w	r1, [r3], #1
 800123c:	e7f9      	b.n	8001232 <memset+0x4>
	...

08001240 <_close_r>:
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	4d06      	ldr	r5, [pc, #24]	; (800125c <_close_r+0x1c>)
 8001244:	2300      	movs	r3, #0
 8001246:	4604      	mov	r4, r0
 8001248:	4608      	mov	r0, r1
 800124a:	602b      	str	r3, [r5, #0]
 800124c:	f7ff fe0a 	bl	8000e64 <_close>
 8001250:	1c43      	adds	r3, r0, #1
 8001252:	d102      	bne.n	800125a <_close_r+0x1a>
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	b103      	cbz	r3, 800125a <_close_r+0x1a>
 8001258:	6023      	str	r3, [r4, #0]
 800125a:	bd38      	pop	{r3, r4, r5, pc}
 800125c:	2000c6f0 	.word	0x2000c6f0

08001260 <_lseek_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4d07      	ldr	r5, [pc, #28]	; (8001280 <_lseek_r+0x20>)
 8001264:	4604      	mov	r4, r0
 8001266:	4608      	mov	r0, r1
 8001268:	4611      	mov	r1, r2
 800126a:	2200      	movs	r2, #0
 800126c:	602a      	str	r2, [r5, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	f7ff fe1c 	bl	8000eac <_lseek>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d102      	bne.n	800127e <_lseek_r+0x1e>
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	b103      	cbz	r3, 800127e <_lseek_r+0x1e>
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	bd38      	pop	{r3, r4, r5, pc}
 8001280:	2000c6f0 	.word	0x2000c6f0

08001284 <_read_r>:
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4d07      	ldr	r5, [pc, #28]	; (80012a4 <_read_r+0x20>)
 8001288:	4604      	mov	r4, r0
 800128a:	4608      	mov	r0, r1
 800128c:	4611      	mov	r1, r2
 800128e:	2200      	movs	r2, #0
 8001290:	602a      	str	r2, [r5, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	f7ff fdad 	bl	8000df2 <_read>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_read_r+0x1e>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_read_r+0x1e>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	2000c6f0 	.word	0x2000c6f0

080012a8 <_write_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4d07      	ldr	r5, [pc, #28]	; (80012c8 <_write_r+0x20>)
 80012ac:	4604      	mov	r4, r0
 80012ae:	4608      	mov	r0, r1
 80012b0:	4611      	mov	r1, r2
 80012b2:	2200      	movs	r2, #0
 80012b4:	602a      	str	r2, [r5, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f7ff fdb8 	bl	8000e2c <_write>
 80012bc:	1c43      	adds	r3, r0, #1
 80012be:	d102      	bne.n	80012c6 <_write_r+0x1e>
 80012c0:	682b      	ldr	r3, [r5, #0]
 80012c2:	b103      	cbz	r3, 80012c6 <_write_r+0x1e>
 80012c4:	6023      	str	r3, [r4, #0]
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
 80012c8:	2000c6f0 	.word	0x2000c6f0

080012cc <__errno>:
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <__errno+0x8>)
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200000ac 	.word	0x200000ac

080012d8 <__libc_init_array>:
 80012d8:	b570      	push	{r4, r5, r6, lr}
 80012da:	4d0d      	ldr	r5, [pc, #52]	; (8001310 <__libc_init_array+0x38>)
 80012dc:	4c0d      	ldr	r4, [pc, #52]	; (8001314 <__libc_init_array+0x3c>)
 80012de:	1b64      	subs	r4, r4, r5
 80012e0:	10a4      	asrs	r4, r4, #2
 80012e2:	2600      	movs	r6, #0
 80012e4:	42a6      	cmp	r6, r4
 80012e6:	d109      	bne.n	80012fc <__libc_init_array+0x24>
 80012e8:	4d0b      	ldr	r5, [pc, #44]	; (8001318 <__libc_init_array+0x40>)
 80012ea:	4c0c      	ldr	r4, [pc, #48]	; (800131c <__libc_init_array+0x44>)
 80012ec:	f000 fe44 	bl	8001f78 <_init>
 80012f0:	1b64      	subs	r4, r4, r5
 80012f2:	10a4      	asrs	r4, r4, #2
 80012f4:	2600      	movs	r6, #0
 80012f6:	42a6      	cmp	r6, r4
 80012f8:	d105      	bne.n	8001306 <__libc_init_array+0x2e>
 80012fa:	bd70      	pop	{r4, r5, r6, pc}
 80012fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001300:	4798      	blx	r3
 8001302:	3601      	adds	r6, #1
 8001304:	e7ee      	b.n	80012e4 <__libc_init_array+0xc>
 8001306:	f855 3b04 	ldr.w	r3, [r5], #4
 800130a:	4798      	blx	r3
 800130c:	3601      	adds	r6, #1
 800130e:	e7f2      	b.n	80012f6 <__libc_init_array+0x1e>
 8001310:	08002178 	.word	0x08002178
 8001314:	08002178 	.word	0x08002178
 8001318:	08002178 	.word	0x08002178
 800131c:	0800217c 	.word	0x0800217c

08001320 <__retarget_lock_init_recursive>:
 8001320:	4770      	bx	lr

08001322 <__retarget_lock_acquire_recursive>:
 8001322:	4770      	bx	lr

08001324 <__retarget_lock_release_recursive>:
 8001324:	4770      	bx	lr

08001326 <strcpy>:
 8001326:	4603      	mov	r3, r0
 8001328:	f811 2b01 	ldrb.w	r2, [r1], #1
 800132c:	f803 2b01 	strb.w	r2, [r3], #1
 8001330:	2a00      	cmp	r2, #0
 8001332:	d1f9      	bne.n	8001328 <strcpy+0x2>
 8001334:	4770      	bx	lr
	...

08001338 <__assert_func>:
 8001338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800133a:	4614      	mov	r4, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <__assert_func+0x2c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4605      	mov	r5, r0
 8001344:	68d8      	ldr	r0, [r3, #12]
 8001346:	b14c      	cbz	r4, 800135c <__assert_func+0x24>
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <__assert_func+0x30>)
 800134a:	9100      	str	r1, [sp, #0]
 800134c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <__assert_func+0x34>)
 8001352:	462b      	mov	r3, r5
 8001354:	f000 fc88 	bl	8001c68 <fiprintf>
 8001358:	f000 fd3e 	bl	8001dd8 <abort>
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__assert_func+0x38>)
 800135e:	461c      	mov	r4, r3
 8001360:	e7f3      	b.n	800134a <__assert_func+0x12>
 8001362:	bf00      	nop
 8001364:	200000ac 	.word	0x200000ac
 8001368:	08002107 	.word	0x08002107
 800136c:	08002114 	.word	0x08002114
 8001370:	08002142 	.word	0x08002142

08001374 <_free_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4605      	mov	r5, r0
 8001378:	2900      	cmp	r1, #0
 800137a:	d041      	beq.n	8001400 <_free_r+0x8c>
 800137c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001380:	1f0c      	subs	r4, r1, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	bfb8      	it	lt
 8001386:	18e4      	addlt	r4, r4, r3
 8001388:	f000 f8e6 	bl	8001558 <__malloc_lock>
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <_free_r+0x90>)
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	b933      	cbnz	r3, 80013a0 <_free_r+0x2c>
 8001392:	6063      	str	r3, [r4, #4]
 8001394:	6014      	str	r4, [r2, #0]
 8001396:	4628      	mov	r0, r5
 8001398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800139c:	f000 b8e2 	b.w	8001564 <__malloc_unlock>
 80013a0:	42a3      	cmp	r3, r4
 80013a2:	d908      	bls.n	80013b6 <_free_r+0x42>
 80013a4:	6820      	ldr	r0, [r4, #0]
 80013a6:	1821      	adds	r1, r4, r0
 80013a8:	428b      	cmp	r3, r1
 80013aa:	bf01      	itttt	eq
 80013ac:	6819      	ldreq	r1, [r3, #0]
 80013ae:	685b      	ldreq	r3, [r3, #4]
 80013b0:	1809      	addeq	r1, r1, r0
 80013b2:	6021      	streq	r1, [r4, #0]
 80013b4:	e7ed      	b.n	8001392 <_free_r+0x1e>
 80013b6:	461a      	mov	r2, r3
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	b10b      	cbz	r3, 80013c0 <_free_r+0x4c>
 80013bc:	42a3      	cmp	r3, r4
 80013be:	d9fa      	bls.n	80013b6 <_free_r+0x42>
 80013c0:	6811      	ldr	r1, [r2, #0]
 80013c2:	1850      	adds	r0, r2, r1
 80013c4:	42a0      	cmp	r0, r4
 80013c6:	d10b      	bne.n	80013e0 <_free_r+0x6c>
 80013c8:	6820      	ldr	r0, [r4, #0]
 80013ca:	4401      	add	r1, r0
 80013cc:	1850      	adds	r0, r2, r1
 80013ce:	4283      	cmp	r3, r0
 80013d0:	6011      	str	r1, [r2, #0]
 80013d2:	d1e0      	bne.n	8001396 <_free_r+0x22>
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	6053      	str	r3, [r2, #4]
 80013da:	4408      	add	r0, r1
 80013dc:	6010      	str	r0, [r2, #0]
 80013de:	e7da      	b.n	8001396 <_free_r+0x22>
 80013e0:	d902      	bls.n	80013e8 <_free_r+0x74>
 80013e2:	230c      	movs	r3, #12
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	e7d6      	b.n	8001396 <_free_r+0x22>
 80013e8:	6820      	ldr	r0, [r4, #0]
 80013ea:	1821      	adds	r1, r4, r0
 80013ec:	428b      	cmp	r3, r1
 80013ee:	bf04      	itt	eq
 80013f0:	6819      	ldreq	r1, [r3, #0]
 80013f2:	685b      	ldreq	r3, [r3, #4]
 80013f4:	6063      	str	r3, [r4, #4]
 80013f6:	bf04      	itt	eq
 80013f8:	1809      	addeq	r1, r1, r0
 80013fa:	6021      	streq	r1, [r4, #0]
 80013fc:	6054      	str	r4, [r2, #4]
 80013fe:	e7ca      	b.n	8001396 <_free_r+0x22>
 8001400:	bd38      	pop	{r3, r4, r5, pc}
 8001402:	bf00      	nop
 8001404:	2000c6f8 	.word	0x2000c6f8

08001408 <malloc>:
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <malloc+0xc>)
 800140a:	4601      	mov	r1, r0
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	f000 b823 	b.w	8001458 <_malloc_r>
 8001412:	bf00      	nop
 8001414:	200000ac 	.word	0x200000ac

08001418 <sbrk_aligned>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	4e0e      	ldr	r6, [pc, #56]	; (8001454 <sbrk_aligned+0x3c>)
 800141c:	460c      	mov	r4, r1
 800141e:	6831      	ldr	r1, [r6, #0]
 8001420:	4605      	mov	r5, r0
 8001422:	b911      	cbnz	r1, 800142a <sbrk_aligned+0x12>
 8001424:	f000 fcc8 	bl	8001db8 <_sbrk_r>
 8001428:	6030      	str	r0, [r6, #0]
 800142a:	4621      	mov	r1, r4
 800142c:	4628      	mov	r0, r5
 800142e:	f000 fcc3 	bl	8001db8 <_sbrk_r>
 8001432:	1c43      	adds	r3, r0, #1
 8001434:	d00a      	beq.n	800144c <sbrk_aligned+0x34>
 8001436:	1cc4      	adds	r4, r0, #3
 8001438:	f024 0403 	bic.w	r4, r4, #3
 800143c:	42a0      	cmp	r0, r4
 800143e:	d007      	beq.n	8001450 <sbrk_aligned+0x38>
 8001440:	1a21      	subs	r1, r4, r0
 8001442:	4628      	mov	r0, r5
 8001444:	f000 fcb8 	bl	8001db8 <_sbrk_r>
 8001448:	3001      	adds	r0, #1
 800144a:	d101      	bne.n	8001450 <sbrk_aligned+0x38>
 800144c:	f04f 34ff 	mov.w	r4, #4294967295
 8001450:	4620      	mov	r0, r4
 8001452:	bd70      	pop	{r4, r5, r6, pc}
 8001454:	2000c6fc 	.word	0x2000c6fc

08001458 <_malloc_r>:
 8001458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800145c:	1ccd      	adds	r5, r1, #3
 800145e:	f025 0503 	bic.w	r5, r5, #3
 8001462:	3508      	adds	r5, #8
 8001464:	2d0c      	cmp	r5, #12
 8001466:	bf38      	it	cc
 8001468:	250c      	movcc	r5, #12
 800146a:	2d00      	cmp	r5, #0
 800146c:	4607      	mov	r7, r0
 800146e:	db01      	blt.n	8001474 <_malloc_r+0x1c>
 8001470:	42a9      	cmp	r1, r5
 8001472:	d905      	bls.n	8001480 <_malloc_r+0x28>
 8001474:	230c      	movs	r3, #12
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	2600      	movs	r6, #0
 800147a:	4630      	mov	r0, r6
 800147c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001554 <_malloc_r+0xfc>
 8001484:	f000 f868 	bl	8001558 <__malloc_lock>
 8001488:	f8d8 3000 	ldr.w	r3, [r8]
 800148c:	461c      	mov	r4, r3
 800148e:	bb5c      	cbnz	r4, 80014e8 <_malloc_r+0x90>
 8001490:	4629      	mov	r1, r5
 8001492:	4638      	mov	r0, r7
 8001494:	f7ff ffc0 	bl	8001418 <sbrk_aligned>
 8001498:	1c43      	adds	r3, r0, #1
 800149a:	4604      	mov	r4, r0
 800149c:	d155      	bne.n	800154a <_malloc_r+0xf2>
 800149e:	f8d8 4000 	ldr.w	r4, [r8]
 80014a2:	4626      	mov	r6, r4
 80014a4:	2e00      	cmp	r6, #0
 80014a6:	d145      	bne.n	8001534 <_malloc_r+0xdc>
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d048      	beq.n	800153e <_malloc_r+0xe6>
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	4631      	mov	r1, r6
 80014b0:	4638      	mov	r0, r7
 80014b2:	eb04 0903 	add.w	r9, r4, r3
 80014b6:	f000 fc7f 	bl	8001db8 <_sbrk_r>
 80014ba:	4581      	cmp	r9, r0
 80014bc:	d13f      	bne.n	800153e <_malloc_r+0xe6>
 80014be:	6821      	ldr	r1, [r4, #0]
 80014c0:	1a6d      	subs	r5, r5, r1
 80014c2:	4629      	mov	r1, r5
 80014c4:	4638      	mov	r0, r7
 80014c6:	f7ff ffa7 	bl	8001418 <sbrk_aligned>
 80014ca:	3001      	adds	r0, #1
 80014cc:	d037      	beq.n	800153e <_malloc_r+0xe6>
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	442b      	add	r3, r5
 80014d2:	6023      	str	r3, [r4, #0]
 80014d4:	f8d8 3000 	ldr.w	r3, [r8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d038      	beq.n	800154e <_malloc_r+0xf6>
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	42a2      	cmp	r2, r4
 80014e0:	d12b      	bne.n	800153a <_malloc_r+0xe2>
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e00f      	b.n	8001508 <_malloc_r+0xb0>
 80014e8:	6822      	ldr	r2, [r4, #0]
 80014ea:	1b52      	subs	r2, r2, r5
 80014ec:	d41f      	bmi.n	800152e <_malloc_r+0xd6>
 80014ee:	2a0b      	cmp	r2, #11
 80014f0:	d917      	bls.n	8001522 <_malloc_r+0xca>
 80014f2:	1961      	adds	r1, r4, r5
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	6025      	str	r5, [r4, #0]
 80014f8:	bf18      	it	ne
 80014fa:	6059      	strne	r1, [r3, #4]
 80014fc:	6863      	ldr	r3, [r4, #4]
 80014fe:	bf08      	it	eq
 8001500:	f8c8 1000 	streq.w	r1, [r8]
 8001504:	5162      	str	r2, [r4, r5]
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	4638      	mov	r0, r7
 800150a:	f104 060b 	add.w	r6, r4, #11
 800150e:	f000 f829 	bl	8001564 <__malloc_unlock>
 8001512:	f026 0607 	bic.w	r6, r6, #7
 8001516:	1d23      	adds	r3, r4, #4
 8001518:	1af2      	subs	r2, r6, r3
 800151a:	d0ae      	beq.n	800147a <_malloc_r+0x22>
 800151c:	1b9b      	subs	r3, r3, r6
 800151e:	50a3      	str	r3, [r4, r2]
 8001520:	e7ab      	b.n	800147a <_malloc_r+0x22>
 8001522:	42a3      	cmp	r3, r4
 8001524:	6862      	ldr	r2, [r4, #4]
 8001526:	d1dd      	bne.n	80014e4 <_malloc_r+0x8c>
 8001528:	f8c8 2000 	str.w	r2, [r8]
 800152c:	e7ec      	b.n	8001508 <_malloc_r+0xb0>
 800152e:	4623      	mov	r3, r4
 8001530:	6864      	ldr	r4, [r4, #4]
 8001532:	e7ac      	b.n	800148e <_malloc_r+0x36>
 8001534:	4634      	mov	r4, r6
 8001536:	6876      	ldr	r6, [r6, #4]
 8001538:	e7b4      	b.n	80014a4 <_malloc_r+0x4c>
 800153a:	4613      	mov	r3, r2
 800153c:	e7cc      	b.n	80014d8 <_malloc_r+0x80>
 800153e:	230c      	movs	r3, #12
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4638      	mov	r0, r7
 8001544:	f000 f80e 	bl	8001564 <__malloc_unlock>
 8001548:	e797      	b.n	800147a <_malloc_r+0x22>
 800154a:	6025      	str	r5, [r4, #0]
 800154c:	e7dc      	b.n	8001508 <_malloc_r+0xb0>
 800154e:	605b      	str	r3, [r3, #4]
 8001550:	deff      	udf	#255	; 0xff
 8001552:	bf00      	nop
 8001554:	2000c6f8 	.word	0x2000c6f8

08001558 <__malloc_lock>:
 8001558:	4801      	ldr	r0, [pc, #4]	; (8001560 <__malloc_lock+0x8>)
 800155a:	f7ff bee2 	b.w	8001322 <__retarget_lock_acquire_recursive>
 800155e:	bf00      	nop
 8001560:	2000c6f4 	.word	0x2000c6f4

08001564 <__malloc_unlock>:
 8001564:	4801      	ldr	r0, [pc, #4]	; (800156c <__malloc_unlock+0x8>)
 8001566:	f7ff bedd 	b.w	8001324 <__retarget_lock_release_recursive>
 800156a:	bf00      	nop
 800156c:	2000c6f4 	.word	0x2000c6f4

08001570 <__sfputc_r>:
 8001570:	6893      	ldr	r3, [r2, #8]
 8001572:	3b01      	subs	r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	b410      	push	{r4}
 8001578:	6093      	str	r3, [r2, #8]
 800157a:	da07      	bge.n	800158c <__sfputc_r+0x1c>
 800157c:	6994      	ldr	r4, [r2, #24]
 800157e:	42a3      	cmp	r3, r4
 8001580:	db01      	blt.n	8001586 <__sfputc_r+0x16>
 8001582:	290a      	cmp	r1, #10
 8001584:	d102      	bne.n	800158c <__sfputc_r+0x1c>
 8001586:	bc10      	pop	{r4}
 8001588:	f000 bb80 	b.w	8001c8c <__swbuf_r>
 800158c:	6813      	ldr	r3, [r2, #0]
 800158e:	1c58      	adds	r0, r3, #1
 8001590:	6010      	str	r0, [r2, #0]
 8001592:	7019      	strb	r1, [r3, #0]
 8001594:	4608      	mov	r0, r1
 8001596:	bc10      	pop	{r4}
 8001598:	4770      	bx	lr

0800159a <__sfputs_r>:
 800159a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159c:	4606      	mov	r6, r0
 800159e:	460f      	mov	r7, r1
 80015a0:	4614      	mov	r4, r2
 80015a2:	18d5      	adds	r5, r2, r3
 80015a4:	42ac      	cmp	r4, r5
 80015a6:	d101      	bne.n	80015ac <__sfputs_r+0x12>
 80015a8:	2000      	movs	r0, #0
 80015aa:	e007      	b.n	80015bc <__sfputs_r+0x22>
 80015ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015b0:	463a      	mov	r2, r7
 80015b2:	4630      	mov	r0, r6
 80015b4:	f7ff ffdc 	bl	8001570 <__sfputc_r>
 80015b8:	1c43      	adds	r3, r0, #1
 80015ba:	d1f3      	bne.n	80015a4 <__sfputs_r+0xa>
 80015bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080015c0 <_vfiprintf_r>:
 80015c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c4:	460d      	mov	r5, r1
 80015c6:	b09d      	sub	sp, #116	; 0x74
 80015c8:	4614      	mov	r4, r2
 80015ca:	4698      	mov	r8, r3
 80015cc:	4606      	mov	r6, r0
 80015ce:	b118      	cbz	r0, 80015d8 <_vfiprintf_r+0x18>
 80015d0:	6a03      	ldr	r3, [r0, #32]
 80015d2:	b90b      	cbnz	r3, 80015d8 <_vfiprintf_r+0x18>
 80015d4:	f7ff fda0 	bl	8001118 <__sinit>
 80015d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015da:	07d9      	lsls	r1, r3, #31
 80015dc:	d405      	bmi.n	80015ea <_vfiprintf_r+0x2a>
 80015de:	89ab      	ldrh	r3, [r5, #12]
 80015e0:	059a      	lsls	r2, r3, #22
 80015e2:	d402      	bmi.n	80015ea <_vfiprintf_r+0x2a>
 80015e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015e6:	f7ff fe9c 	bl	8001322 <__retarget_lock_acquire_recursive>
 80015ea:	89ab      	ldrh	r3, [r5, #12]
 80015ec:	071b      	lsls	r3, r3, #28
 80015ee:	d501      	bpl.n	80015f4 <_vfiprintf_r+0x34>
 80015f0:	692b      	ldr	r3, [r5, #16]
 80015f2:	b99b      	cbnz	r3, 800161c <_vfiprintf_r+0x5c>
 80015f4:	4629      	mov	r1, r5
 80015f6:	4630      	mov	r0, r6
 80015f8:	f000 fb86 	bl	8001d08 <__swsetup_r>
 80015fc:	b170      	cbz	r0, 800161c <_vfiprintf_r+0x5c>
 80015fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001600:	07dc      	lsls	r4, r3, #31
 8001602:	d504      	bpl.n	800160e <_vfiprintf_r+0x4e>
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	b01d      	add	sp, #116	; 0x74
 800160a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800160e:	89ab      	ldrh	r3, [r5, #12]
 8001610:	0598      	lsls	r0, r3, #22
 8001612:	d4f7      	bmi.n	8001604 <_vfiprintf_r+0x44>
 8001614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001616:	f7ff fe85 	bl	8001324 <__retarget_lock_release_recursive>
 800161a:	e7f3      	b.n	8001604 <_vfiprintf_r+0x44>
 800161c:	2300      	movs	r3, #0
 800161e:	9309      	str	r3, [sp, #36]	; 0x24
 8001620:	2320      	movs	r3, #32
 8001622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001626:	f8cd 800c 	str.w	r8, [sp, #12]
 800162a:	2330      	movs	r3, #48	; 0x30
 800162c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80017e0 <_vfiprintf_r+0x220>
 8001630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001634:	f04f 0901 	mov.w	r9, #1
 8001638:	4623      	mov	r3, r4
 800163a:	469a      	mov	sl, r3
 800163c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001640:	b10a      	cbz	r2, 8001646 <_vfiprintf_r+0x86>
 8001642:	2a25      	cmp	r2, #37	; 0x25
 8001644:	d1f9      	bne.n	800163a <_vfiprintf_r+0x7a>
 8001646:	ebba 0b04 	subs.w	fp, sl, r4
 800164a:	d00b      	beq.n	8001664 <_vfiprintf_r+0xa4>
 800164c:	465b      	mov	r3, fp
 800164e:	4622      	mov	r2, r4
 8001650:	4629      	mov	r1, r5
 8001652:	4630      	mov	r0, r6
 8001654:	f7ff ffa1 	bl	800159a <__sfputs_r>
 8001658:	3001      	adds	r0, #1
 800165a:	f000 80a9 	beq.w	80017b0 <_vfiprintf_r+0x1f0>
 800165e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001660:	445a      	add	r2, fp
 8001662:	9209      	str	r2, [sp, #36]	; 0x24
 8001664:	f89a 3000 	ldrb.w	r3, [sl]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a1 	beq.w	80017b0 <_vfiprintf_r+0x1f0>
 800166e:	2300      	movs	r3, #0
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001678:	f10a 0a01 	add.w	sl, sl, #1
 800167c:	9304      	str	r3, [sp, #16]
 800167e:	9307      	str	r3, [sp, #28]
 8001680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001684:	931a      	str	r3, [sp, #104]	; 0x68
 8001686:	4654      	mov	r4, sl
 8001688:	2205      	movs	r2, #5
 800168a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800168e:	4854      	ldr	r0, [pc, #336]	; (80017e0 <_vfiprintf_r+0x220>)
 8001690:	f7fe fdae 	bl	80001f0 <memchr>
 8001694:	9a04      	ldr	r2, [sp, #16]
 8001696:	b9d8      	cbnz	r0, 80016d0 <_vfiprintf_r+0x110>
 8001698:	06d1      	lsls	r1, r2, #27
 800169a:	bf44      	itt	mi
 800169c:	2320      	movmi	r3, #32
 800169e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016a2:	0713      	lsls	r3, r2, #28
 80016a4:	bf44      	itt	mi
 80016a6:	232b      	movmi	r3, #43	; 0x2b
 80016a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016ac:	f89a 3000 	ldrb.w	r3, [sl]
 80016b0:	2b2a      	cmp	r3, #42	; 0x2a
 80016b2:	d015      	beq.n	80016e0 <_vfiprintf_r+0x120>
 80016b4:	9a07      	ldr	r2, [sp, #28]
 80016b6:	4654      	mov	r4, sl
 80016b8:	2000      	movs	r0, #0
 80016ba:	f04f 0c0a 	mov.w	ip, #10
 80016be:	4621      	mov	r1, r4
 80016c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016c4:	3b30      	subs	r3, #48	; 0x30
 80016c6:	2b09      	cmp	r3, #9
 80016c8:	d94d      	bls.n	8001766 <_vfiprintf_r+0x1a6>
 80016ca:	b1b0      	cbz	r0, 80016fa <_vfiprintf_r+0x13a>
 80016cc:	9207      	str	r2, [sp, #28]
 80016ce:	e014      	b.n	80016fa <_vfiprintf_r+0x13a>
 80016d0:	eba0 0308 	sub.w	r3, r0, r8
 80016d4:	fa09 f303 	lsl.w	r3, r9, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	9304      	str	r3, [sp, #16]
 80016dc:	46a2      	mov	sl, r4
 80016de:	e7d2      	b.n	8001686 <_vfiprintf_r+0xc6>
 80016e0:	9b03      	ldr	r3, [sp, #12]
 80016e2:	1d19      	adds	r1, r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	9103      	str	r1, [sp, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bfbb      	ittet	lt
 80016ec:	425b      	neglt	r3, r3
 80016ee:	f042 0202 	orrlt.w	r2, r2, #2
 80016f2:	9307      	strge	r3, [sp, #28]
 80016f4:	9307      	strlt	r3, [sp, #28]
 80016f6:	bfb8      	it	lt
 80016f8:	9204      	strlt	r2, [sp, #16]
 80016fa:	7823      	ldrb	r3, [r4, #0]
 80016fc:	2b2e      	cmp	r3, #46	; 0x2e
 80016fe:	d10c      	bne.n	800171a <_vfiprintf_r+0x15a>
 8001700:	7863      	ldrb	r3, [r4, #1]
 8001702:	2b2a      	cmp	r3, #42	; 0x2a
 8001704:	d134      	bne.n	8001770 <_vfiprintf_r+0x1b0>
 8001706:	9b03      	ldr	r3, [sp, #12]
 8001708:	1d1a      	adds	r2, r3, #4
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	9203      	str	r2, [sp, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfb8      	it	lt
 8001712:	f04f 33ff 	movlt.w	r3, #4294967295
 8001716:	3402      	adds	r4, #2
 8001718:	9305      	str	r3, [sp, #20]
 800171a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80017e4 <_vfiprintf_r+0x224>
 800171e:	7821      	ldrb	r1, [r4, #0]
 8001720:	2203      	movs	r2, #3
 8001722:	4650      	mov	r0, sl
 8001724:	f7fe fd64 	bl	80001f0 <memchr>
 8001728:	b138      	cbz	r0, 800173a <_vfiprintf_r+0x17a>
 800172a:	9b04      	ldr	r3, [sp, #16]
 800172c:	eba0 000a 	sub.w	r0, r0, sl
 8001730:	2240      	movs	r2, #64	; 0x40
 8001732:	4082      	lsls	r2, r0
 8001734:	4313      	orrs	r3, r2
 8001736:	3401      	adds	r4, #1
 8001738:	9304      	str	r3, [sp, #16]
 800173a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800173e:	482a      	ldr	r0, [pc, #168]	; (80017e8 <_vfiprintf_r+0x228>)
 8001740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001744:	2206      	movs	r2, #6
 8001746:	f7fe fd53 	bl	80001f0 <memchr>
 800174a:	2800      	cmp	r0, #0
 800174c:	d03f      	beq.n	80017ce <_vfiprintf_r+0x20e>
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <_vfiprintf_r+0x22c>)
 8001750:	bb1b      	cbnz	r3, 800179a <_vfiprintf_r+0x1da>
 8001752:	9b03      	ldr	r3, [sp, #12]
 8001754:	3307      	adds	r3, #7
 8001756:	f023 0307 	bic.w	r3, r3, #7
 800175a:	3308      	adds	r3, #8
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	443b      	add	r3, r7
 8001762:	9309      	str	r3, [sp, #36]	; 0x24
 8001764:	e768      	b.n	8001638 <_vfiprintf_r+0x78>
 8001766:	fb0c 3202 	mla	r2, ip, r2, r3
 800176a:	460c      	mov	r4, r1
 800176c:	2001      	movs	r0, #1
 800176e:	e7a6      	b.n	80016be <_vfiprintf_r+0xfe>
 8001770:	2300      	movs	r3, #0
 8001772:	3401      	adds	r4, #1
 8001774:	9305      	str	r3, [sp, #20]
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 0c0a 	mov.w	ip, #10
 800177c:	4620      	mov	r0, r4
 800177e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001782:	3a30      	subs	r2, #48	; 0x30
 8001784:	2a09      	cmp	r2, #9
 8001786:	d903      	bls.n	8001790 <_vfiprintf_r+0x1d0>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0c6      	beq.n	800171a <_vfiprintf_r+0x15a>
 800178c:	9105      	str	r1, [sp, #20]
 800178e:	e7c4      	b.n	800171a <_vfiprintf_r+0x15a>
 8001790:	fb0c 2101 	mla	r1, ip, r1, r2
 8001794:	4604      	mov	r4, r0
 8001796:	2301      	movs	r3, #1
 8001798:	e7f0      	b.n	800177c <_vfiprintf_r+0x1bc>
 800179a:	ab03      	add	r3, sp, #12
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	462a      	mov	r2, r5
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_vfiprintf_r+0x230>)
 80017a2:	a904      	add	r1, sp, #16
 80017a4:	4630      	mov	r0, r6
 80017a6:	f3af 8000 	nop.w
 80017aa:	4607      	mov	r7, r0
 80017ac:	1c78      	adds	r0, r7, #1
 80017ae:	d1d6      	bne.n	800175e <_vfiprintf_r+0x19e>
 80017b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017b2:	07d9      	lsls	r1, r3, #31
 80017b4:	d405      	bmi.n	80017c2 <_vfiprintf_r+0x202>
 80017b6:	89ab      	ldrh	r3, [r5, #12]
 80017b8:	059a      	lsls	r2, r3, #22
 80017ba:	d402      	bmi.n	80017c2 <_vfiprintf_r+0x202>
 80017bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017be:	f7ff fdb1 	bl	8001324 <__retarget_lock_release_recursive>
 80017c2:	89ab      	ldrh	r3, [r5, #12]
 80017c4:	065b      	lsls	r3, r3, #25
 80017c6:	f53f af1d 	bmi.w	8001604 <_vfiprintf_r+0x44>
 80017ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80017cc:	e71c      	b.n	8001608 <_vfiprintf_r+0x48>
 80017ce:	ab03      	add	r3, sp, #12
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	462a      	mov	r2, r5
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <_vfiprintf_r+0x230>)
 80017d6:	a904      	add	r1, sp, #16
 80017d8:	4630      	mov	r0, r6
 80017da:	f000 f879 	bl	80018d0 <_printf_i>
 80017de:	e7e4      	b.n	80017aa <_vfiprintf_r+0x1ea>
 80017e0:	08002143 	.word	0x08002143
 80017e4:	08002149 	.word	0x08002149
 80017e8:	0800214d 	.word	0x0800214d
 80017ec:	00000000 	.word	0x00000000
 80017f0:	0800159b 	.word	0x0800159b

080017f4 <_printf_common>:
 80017f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017f8:	4616      	mov	r6, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	688a      	ldr	r2, [r1, #8]
 80017fe:	690b      	ldr	r3, [r1, #16]
 8001800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001804:	4293      	cmp	r3, r2
 8001806:	bfb8      	it	lt
 8001808:	4613      	movlt	r3, r2
 800180a:	6033      	str	r3, [r6, #0]
 800180c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001810:	4607      	mov	r7, r0
 8001812:	460c      	mov	r4, r1
 8001814:	b10a      	cbz	r2, 800181a <_printf_common+0x26>
 8001816:	3301      	adds	r3, #1
 8001818:	6033      	str	r3, [r6, #0]
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	0699      	lsls	r1, r3, #26
 800181e:	bf42      	ittt	mi
 8001820:	6833      	ldrmi	r3, [r6, #0]
 8001822:	3302      	addmi	r3, #2
 8001824:	6033      	strmi	r3, [r6, #0]
 8001826:	6825      	ldr	r5, [r4, #0]
 8001828:	f015 0506 	ands.w	r5, r5, #6
 800182c:	d106      	bne.n	800183c <_printf_common+0x48>
 800182e:	f104 0a19 	add.w	sl, r4, #25
 8001832:	68e3      	ldr	r3, [r4, #12]
 8001834:	6832      	ldr	r2, [r6, #0]
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	42ab      	cmp	r3, r5
 800183a:	dc26      	bgt.n	800188a <_printf_common+0x96>
 800183c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001840:	1e13      	subs	r3, r2, #0
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	bf18      	it	ne
 8001846:	2301      	movne	r3, #1
 8001848:	0692      	lsls	r2, r2, #26
 800184a:	d42b      	bmi.n	80018a4 <_printf_common+0xb0>
 800184c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001850:	4649      	mov	r1, r9
 8001852:	4638      	mov	r0, r7
 8001854:	47c0      	blx	r8
 8001856:	3001      	adds	r0, #1
 8001858:	d01e      	beq.n	8001898 <_printf_common+0xa4>
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	6922      	ldr	r2, [r4, #16]
 800185e:	f003 0306 	and.w	r3, r3, #6
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf02      	ittt	eq
 8001866:	68e5      	ldreq	r5, [r4, #12]
 8001868:	6833      	ldreq	r3, [r6, #0]
 800186a:	1aed      	subeq	r5, r5, r3
 800186c:	68a3      	ldr	r3, [r4, #8]
 800186e:	bf0c      	ite	eq
 8001870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001874:	2500      	movne	r5, #0
 8001876:	4293      	cmp	r3, r2
 8001878:	bfc4      	itt	gt
 800187a:	1a9b      	subgt	r3, r3, r2
 800187c:	18ed      	addgt	r5, r5, r3
 800187e:	2600      	movs	r6, #0
 8001880:	341a      	adds	r4, #26
 8001882:	42b5      	cmp	r5, r6
 8001884:	d11a      	bne.n	80018bc <_printf_common+0xc8>
 8001886:	2000      	movs	r0, #0
 8001888:	e008      	b.n	800189c <_printf_common+0xa8>
 800188a:	2301      	movs	r3, #1
 800188c:	4652      	mov	r2, sl
 800188e:	4649      	mov	r1, r9
 8001890:	4638      	mov	r0, r7
 8001892:	47c0      	blx	r8
 8001894:	3001      	adds	r0, #1
 8001896:	d103      	bne.n	80018a0 <_printf_common+0xac>
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018a0:	3501      	adds	r5, #1
 80018a2:	e7c6      	b.n	8001832 <_printf_common+0x3e>
 80018a4:	18e1      	adds	r1, r4, r3
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	2030      	movs	r0, #48	; 0x30
 80018aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80018ae:	4422      	add	r2, r4
 80018b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80018b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80018b8:	3302      	adds	r3, #2
 80018ba:	e7c7      	b.n	800184c <_printf_common+0x58>
 80018bc:	2301      	movs	r3, #1
 80018be:	4622      	mov	r2, r4
 80018c0:	4649      	mov	r1, r9
 80018c2:	4638      	mov	r0, r7
 80018c4:	47c0      	blx	r8
 80018c6:	3001      	adds	r0, #1
 80018c8:	d0e6      	beq.n	8001898 <_printf_common+0xa4>
 80018ca:	3601      	adds	r6, #1
 80018cc:	e7d9      	b.n	8001882 <_printf_common+0x8e>
	...

080018d0 <_printf_i>:
 80018d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018d4:	7e0f      	ldrb	r7, [r1, #24]
 80018d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80018d8:	2f78      	cmp	r7, #120	; 0x78
 80018da:	4691      	mov	r9, r2
 80018dc:	4680      	mov	r8, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	469a      	mov	sl, r3
 80018e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80018e6:	d807      	bhi.n	80018f8 <_printf_i+0x28>
 80018e8:	2f62      	cmp	r7, #98	; 0x62
 80018ea:	d80a      	bhi.n	8001902 <_printf_i+0x32>
 80018ec:	2f00      	cmp	r7, #0
 80018ee:	f000 80d4 	beq.w	8001a9a <_printf_i+0x1ca>
 80018f2:	2f58      	cmp	r7, #88	; 0x58
 80018f4:	f000 80c0 	beq.w	8001a78 <_printf_i+0x1a8>
 80018f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001900:	e03a      	b.n	8001978 <_printf_i+0xa8>
 8001902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001906:	2b15      	cmp	r3, #21
 8001908:	d8f6      	bhi.n	80018f8 <_printf_i+0x28>
 800190a:	a101      	add	r1, pc, #4	; (adr r1, 8001910 <_printf_i+0x40>)
 800190c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001910:	08001969 	.word	0x08001969
 8001914:	0800197d 	.word	0x0800197d
 8001918:	080018f9 	.word	0x080018f9
 800191c:	080018f9 	.word	0x080018f9
 8001920:	080018f9 	.word	0x080018f9
 8001924:	080018f9 	.word	0x080018f9
 8001928:	0800197d 	.word	0x0800197d
 800192c:	080018f9 	.word	0x080018f9
 8001930:	080018f9 	.word	0x080018f9
 8001934:	080018f9 	.word	0x080018f9
 8001938:	080018f9 	.word	0x080018f9
 800193c:	08001a81 	.word	0x08001a81
 8001940:	080019a9 	.word	0x080019a9
 8001944:	08001a3b 	.word	0x08001a3b
 8001948:	080018f9 	.word	0x080018f9
 800194c:	080018f9 	.word	0x080018f9
 8001950:	08001aa3 	.word	0x08001aa3
 8001954:	080018f9 	.word	0x080018f9
 8001958:	080019a9 	.word	0x080019a9
 800195c:	080018f9 	.word	0x080018f9
 8001960:	080018f9 	.word	0x080018f9
 8001964:	08001a43 	.word	0x08001a43
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	1d1a      	adds	r2, r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	602a      	str	r2, [r5, #0]
 8001970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001978:	2301      	movs	r3, #1
 800197a:	e09f      	b.n	8001abc <_printf_i+0x1ec>
 800197c:	6820      	ldr	r0, [r4, #0]
 800197e:	682b      	ldr	r3, [r5, #0]
 8001980:	0607      	lsls	r7, r0, #24
 8001982:	f103 0104 	add.w	r1, r3, #4
 8001986:	6029      	str	r1, [r5, #0]
 8001988:	d501      	bpl.n	800198e <_printf_i+0xbe>
 800198a:	681e      	ldr	r6, [r3, #0]
 800198c:	e003      	b.n	8001996 <_printf_i+0xc6>
 800198e:	0646      	lsls	r6, r0, #25
 8001990:	d5fb      	bpl.n	800198a <_printf_i+0xba>
 8001992:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001996:	2e00      	cmp	r6, #0
 8001998:	da03      	bge.n	80019a2 <_printf_i+0xd2>
 800199a:	232d      	movs	r3, #45	; 0x2d
 800199c:	4276      	negs	r6, r6
 800199e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019a2:	485a      	ldr	r0, [pc, #360]	; (8001b0c <_printf_i+0x23c>)
 80019a4:	230a      	movs	r3, #10
 80019a6:	e012      	b.n	80019ce <_printf_i+0xfe>
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	6820      	ldr	r0, [r4, #0]
 80019ac:	1d19      	adds	r1, r3, #4
 80019ae:	6029      	str	r1, [r5, #0]
 80019b0:	0605      	lsls	r5, r0, #24
 80019b2:	d501      	bpl.n	80019b8 <_printf_i+0xe8>
 80019b4:	681e      	ldr	r6, [r3, #0]
 80019b6:	e002      	b.n	80019be <_printf_i+0xee>
 80019b8:	0641      	lsls	r1, r0, #25
 80019ba:	d5fb      	bpl.n	80019b4 <_printf_i+0xe4>
 80019bc:	881e      	ldrh	r6, [r3, #0]
 80019be:	4853      	ldr	r0, [pc, #332]	; (8001b0c <_printf_i+0x23c>)
 80019c0:	2f6f      	cmp	r7, #111	; 0x6f
 80019c2:	bf0c      	ite	eq
 80019c4:	2308      	moveq	r3, #8
 80019c6:	230a      	movne	r3, #10
 80019c8:	2100      	movs	r1, #0
 80019ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80019ce:	6865      	ldr	r5, [r4, #4]
 80019d0:	60a5      	str	r5, [r4, #8]
 80019d2:	2d00      	cmp	r5, #0
 80019d4:	bfa2      	ittt	ge
 80019d6:	6821      	ldrge	r1, [r4, #0]
 80019d8:	f021 0104 	bicge.w	r1, r1, #4
 80019dc:	6021      	strge	r1, [r4, #0]
 80019de:	b90e      	cbnz	r6, 80019e4 <_printf_i+0x114>
 80019e0:	2d00      	cmp	r5, #0
 80019e2:	d04b      	beq.n	8001a7c <_printf_i+0x1ac>
 80019e4:	4615      	mov	r5, r2
 80019e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80019ea:	fb03 6711 	mls	r7, r3, r1, r6
 80019ee:	5dc7      	ldrb	r7, [r0, r7]
 80019f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80019f4:	4637      	mov	r7, r6
 80019f6:	42bb      	cmp	r3, r7
 80019f8:	460e      	mov	r6, r1
 80019fa:	d9f4      	bls.n	80019e6 <_printf_i+0x116>
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d10b      	bne.n	8001a18 <_printf_i+0x148>
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	07de      	lsls	r6, r3, #31
 8001a04:	d508      	bpl.n	8001a18 <_printf_i+0x148>
 8001a06:	6923      	ldr	r3, [r4, #16]
 8001a08:	6861      	ldr	r1, [r4, #4]
 8001a0a:	4299      	cmp	r1, r3
 8001a0c:	bfde      	ittt	le
 8001a0e:	2330      	movle	r3, #48	; 0x30
 8001a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a18:	1b52      	subs	r2, r2, r5
 8001a1a:	6122      	str	r2, [r4, #16]
 8001a1c:	f8cd a000 	str.w	sl, [sp]
 8001a20:	464b      	mov	r3, r9
 8001a22:	aa03      	add	r2, sp, #12
 8001a24:	4621      	mov	r1, r4
 8001a26:	4640      	mov	r0, r8
 8001a28:	f7ff fee4 	bl	80017f4 <_printf_common>
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d14a      	bne.n	8001ac6 <_printf_i+0x1f6>
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	b004      	add	sp, #16
 8001a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	6023      	str	r3, [r4, #0]
 8001a42:	4833      	ldr	r0, [pc, #204]	; (8001b10 <_printf_i+0x240>)
 8001a44:	2778      	movs	r7, #120	; 0x78
 8001a46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	6829      	ldr	r1, [r5, #0]
 8001a4e:	061f      	lsls	r7, r3, #24
 8001a50:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a54:	d402      	bmi.n	8001a5c <_printf_i+0x18c>
 8001a56:	065f      	lsls	r7, r3, #25
 8001a58:	bf48      	it	mi
 8001a5a:	b2b6      	uxthmi	r6, r6
 8001a5c:	07df      	lsls	r7, r3, #31
 8001a5e:	bf48      	it	mi
 8001a60:	f043 0320 	orrmi.w	r3, r3, #32
 8001a64:	6029      	str	r1, [r5, #0]
 8001a66:	bf48      	it	mi
 8001a68:	6023      	strmi	r3, [r4, #0]
 8001a6a:	b91e      	cbnz	r6, 8001a74 <_printf_i+0x1a4>
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	f023 0320 	bic.w	r3, r3, #32
 8001a72:	6023      	str	r3, [r4, #0]
 8001a74:	2310      	movs	r3, #16
 8001a76:	e7a7      	b.n	80019c8 <_printf_i+0xf8>
 8001a78:	4824      	ldr	r0, [pc, #144]	; (8001b0c <_printf_i+0x23c>)
 8001a7a:	e7e4      	b.n	8001a46 <_printf_i+0x176>
 8001a7c:	4615      	mov	r5, r2
 8001a7e:	e7bd      	b.n	80019fc <_printf_i+0x12c>
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	6826      	ldr	r6, [r4, #0]
 8001a84:	6961      	ldr	r1, [r4, #20]
 8001a86:	1d18      	adds	r0, r3, #4
 8001a88:	6028      	str	r0, [r5, #0]
 8001a8a:	0635      	lsls	r5, r6, #24
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	d501      	bpl.n	8001a94 <_printf_i+0x1c4>
 8001a90:	6019      	str	r1, [r3, #0]
 8001a92:	e002      	b.n	8001a9a <_printf_i+0x1ca>
 8001a94:	0670      	lsls	r0, r6, #25
 8001a96:	d5fb      	bpl.n	8001a90 <_printf_i+0x1c0>
 8001a98:	8019      	strh	r1, [r3, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	6123      	str	r3, [r4, #16]
 8001a9e:	4615      	mov	r5, r2
 8001aa0:	e7bc      	b.n	8001a1c <_printf_i+0x14c>
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	1d1a      	adds	r2, r3, #4
 8001aa6:	602a      	str	r2, [r5, #0]
 8001aa8:	681d      	ldr	r5, [r3, #0]
 8001aaa:	6862      	ldr	r2, [r4, #4]
 8001aac:	2100      	movs	r1, #0
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f7fe fb9e 	bl	80001f0 <memchr>
 8001ab4:	b108      	cbz	r0, 8001aba <_printf_i+0x1ea>
 8001ab6:	1b40      	subs	r0, r0, r5
 8001ab8:	6060      	str	r0, [r4, #4]
 8001aba:	6863      	ldr	r3, [r4, #4]
 8001abc:	6123      	str	r3, [r4, #16]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ac4:	e7aa      	b.n	8001a1c <_printf_i+0x14c>
 8001ac6:	6923      	ldr	r3, [r4, #16]
 8001ac8:	462a      	mov	r2, r5
 8001aca:	4649      	mov	r1, r9
 8001acc:	4640      	mov	r0, r8
 8001ace:	47d0      	blx	sl
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	d0ad      	beq.n	8001a30 <_printf_i+0x160>
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	079b      	lsls	r3, r3, #30
 8001ad8:	d413      	bmi.n	8001b02 <_printf_i+0x232>
 8001ada:	68e0      	ldr	r0, [r4, #12]
 8001adc:	9b03      	ldr	r3, [sp, #12]
 8001ade:	4298      	cmp	r0, r3
 8001ae0:	bfb8      	it	lt
 8001ae2:	4618      	movlt	r0, r3
 8001ae4:	e7a6      	b.n	8001a34 <_printf_i+0x164>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4632      	mov	r2, r6
 8001aea:	4649      	mov	r1, r9
 8001aec:	4640      	mov	r0, r8
 8001aee:	47d0      	blx	sl
 8001af0:	3001      	adds	r0, #1
 8001af2:	d09d      	beq.n	8001a30 <_printf_i+0x160>
 8001af4:	3501      	adds	r5, #1
 8001af6:	68e3      	ldr	r3, [r4, #12]
 8001af8:	9903      	ldr	r1, [sp, #12]
 8001afa:	1a5b      	subs	r3, r3, r1
 8001afc:	42ab      	cmp	r3, r5
 8001afe:	dcf2      	bgt.n	8001ae6 <_printf_i+0x216>
 8001b00:	e7eb      	b.n	8001ada <_printf_i+0x20a>
 8001b02:	2500      	movs	r5, #0
 8001b04:	f104 0619 	add.w	r6, r4, #25
 8001b08:	e7f5      	b.n	8001af6 <_printf_i+0x226>
 8001b0a:	bf00      	nop
 8001b0c:	08002154 	.word	0x08002154
 8001b10:	08002165 	.word	0x08002165

08001b14 <__sflush_r>:
 8001b14:	898a      	ldrh	r2, [r1, #12]
 8001b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b18:	4605      	mov	r5, r0
 8001b1a:	0710      	lsls	r0, r2, #28
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	d457      	bmi.n	8001bd0 <__sflush_r+0xbc>
 8001b20:	684b      	ldr	r3, [r1, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	dc04      	bgt.n	8001b30 <__sflush_r+0x1c>
 8001b26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dc01      	bgt.n	8001b30 <__sflush_r+0x1c>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b32:	2e00      	cmp	r6, #0
 8001b34:	d0fa      	beq.n	8001b2c <__sflush_r+0x18>
 8001b36:	2300      	movs	r3, #0
 8001b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b3c:	682f      	ldr	r7, [r5, #0]
 8001b3e:	6a21      	ldr	r1, [r4, #32]
 8001b40:	602b      	str	r3, [r5, #0]
 8001b42:	d032      	beq.n	8001baa <__sflush_r+0x96>
 8001b44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	075a      	lsls	r2, r3, #29
 8001b4a:	d505      	bpl.n	8001b58 <__sflush_r+0x44>
 8001b4c:	6863      	ldr	r3, [r4, #4]
 8001b4e:	1ac0      	subs	r0, r0, r3
 8001b50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b52:	b10b      	cbz	r3, 8001b58 <__sflush_r+0x44>
 8001b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b56:	1ac0      	subs	r0, r0, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b5e:	6a21      	ldr	r1, [r4, #32]
 8001b60:	4628      	mov	r0, r5
 8001b62:	47b0      	blx	r6
 8001b64:	1c43      	adds	r3, r0, #1
 8001b66:	89a3      	ldrh	r3, [r4, #12]
 8001b68:	d106      	bne.n	8001b78 <__sflush_r+0x64>
 8001b6a:	6829      	ldr	r1, [r5, #0]
 8001b6c:	291d      	cmp	r1, #29
 8001b6e:	d82b      	bhi.n	8001bc8 <__sflush_r+0xb4>
 8001b70:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <__sflush_r+0x100>)
 8001b72:	410a      	asrs	r2, r1
 8001b74:	07d6      	lsls	r6, r2, #31
 8001b76:	d427      	bmi.n	8001bc8 <__sflush_r+0xb4>
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6062      	str	r2, [r4, #4]
 8001b7c:	04d9      	lsls	r1, r3, #19
 8001b7e:	6922      	ldr	r2, [r4, #16]
 8001b80:	6022      	str	r2, [r4, #0]
 8001b82:	d504      	bpl.n	8001b8e <__sflush_r+0x7a>
 8001b84:	1c42      	adds	r2, r0, #1
 8001b86:	d101      	bne.n	8001b8c <__sflush_r+0x78>
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	b903      	cbnz	r3, 8001b8e <__sflush_r+0x7a>
 8001b8c:	6560      	str	r0, [r4, #84]	; 0x54
 8001b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b90:	602f      	str	r7, [r5, #0]
 8001b92:	2900      	cmp	r1, #0
 8001b94:	d0ca      	beq.n	8001b2c <__sflush_r+0x18>
 8001b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b9a:	4299      	cmp	r1, r3
 8001b9c:	d002      	beq.n	8001ba4 <__sflush_r+0x90>
 8001b9e:	4628      	mov	r0, r5
 8001ba0:	f7ff fbe8 	bl	8001374 <_free_r>
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	6360      	str	r0, [r4, #52]	; 0x34
 8001ba8:	e7c1      	b.n	8001b2e <__sflush_r+0x1a>
 8001baa:	2301      	movs	r3, #1
 8001bac:	4628      	mov	r0, r5
 8001bae:	47b0      	blx	r6
 8001bb0:	1c41      	adds	r1, r0, #1
 8001bb2:	d1c8      	bne.n	8001b46 <__sflush_r+0x32>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0c5      	beq.n	8001b46 <__sflush_r+0x32>
 8001bba:	2b1d      	cmp	r3, #29
 8001bbc:	d001      	beq.n	8001bc2 <__sflush_r+0xae>
 8001bbe:	2b16      	cmp	r3, #22
 8001bc0:	d101      	bne.n	8001bc6 <__sflush_r+0xb2>
 8001bc2:	602f      	str	r7, [r5, #0]
 8001bc4:	e7b2      	b.n	8001b2c <__sflush_r+0x18>
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bcc:	81a3      	strh	r3, [r4, #12]
 8001bce:	e7ae      	b.n	8001b2e <__sflush_r+0x1a>
 8001bd0:	690f      	ldr	r7, [r1, #16]
 8001bd2:	2f00      	cmp	r7, #0
 8001bd4:	d0aa      	beq.n	8001b2c <__sflush_r+0x18>
 8001bd6:	0793      	lsls	r3, r2, #30
 8001bd8:	680e      	ldr	r6, [r1, #0]
 8001bda:	bf08      	it	eq
 8001bdc:	694b      	ldreq	r3, [r1, #20]
 8001bde:	600f      	str	r7, [r1, #0]
 8001be0:	bf18      	it	ne
 8001be2:	2300      	movne	r3, #0
 8001be4:	1bf6      	subs	r6, r6, r7
 8001be6:	608b      	str	r3, [r1, #8]
 8001be8:	2e00      	cmp	r6, #0
 8001bea:	dd9f      	ble.n	8001b2c <__sflush_r+0x18>
 8001bec:	6a21      	ldr	r1, [r4, #32]
 8001bee:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001bf2:	4633      	mov	r3, r6
 8001bf4:	463a      	mov	r2, r7
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	47e0      	blx	ip
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	dc06      	bgt.n	8001c0c <__sflush_r+0xf8>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c04:	81a3      	strh	r3, [r4, #12]
 8001c06:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0a:	e790      	b.n	8001b2e <__sflush_r+0x1a>
 8001c0c:	4407      	add	r7, r0
 8001c0e:	1a36      	subs	r6, r6, r0
 8001c10:	e7ea      	b.n	8001be8 <__sflush_r+0xd4>
 8001c12:	bf00      	nop
 8001c14:	dfbffffe 	.word	0xdfbffffe

08001c18 <_fflush_r>:
 8001c18:	b538      	push	{r3, r4, r5, lr}
 8001c1a:	690b      	ldr	r3, [r1, #16]
 8001c1c:	4605      	mov	r5, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	b913      	cbnz	r3, 8001c28 <_fflush_r+0x10>
 8001c22:	2500      	movs	r5, #0
 8001c24:	4628      	mov	r0, r5
 8001c26:	bd38      	pop	{r3, r4, r5, pc}
 8001c28:	b118      	cbz	r0, 8001c32 <_fflush_r+0x1a>
 8001c2a:	6a03      	ldr	r3, [r0, #32]
 8001c2c:	b90b      	cbnz	r3, 8001c32 <_fflush_r+0x1a>
 8001c2e:	f7ff fa73 	bl	8001118 <__sinit>
 8001c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f3      	beq.n	8001c22 <_fflush_r+0xa>
 8001c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c3c:	07d0      	lsls	r0, r2, #31
 8001c3e:	d404      	bmi.n	8001c4a <_fflush_r+0x32>
 8001c40:	0599      	lsls	r1, r3, #22
 8001c42:	d402      	bmi.n	8001c4a <_fflush_r+0x32>
 8001c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c46:	f7ff fb6c 	bl	8001322 <__retarget_lock_acquire_recursive>
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	f7ff ff61 	bl	8001b14 <__sflush_r>
 8001c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c54:	07da      	lsls	r2, r3, #31
 8001c56:	4605      	mov	r5, r0
 8001c58:	d4e4      	bmi.n	8001c24 <_fflush_r+0xc>
 8001c5a:	89a3      	ldrh	r3, [r4, #12]
 8001c5c:	059b      	lsls	r3, r3, #22
 8001c5e:	d4e1      	bmi.n	8001c24 <_fflush_r+0xc>
 8001c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c62:	f7ff fb5f 	bl	8001324 <__retarget_lock_release_recursive>
 8001c66:	e7dd      	b.n	8001c24 <_fflush_r+0xc>

08001c68 <fiprintf>:
 8001c68:	b40e      	push	{r1, r2, r3}
 8001c6a:	b503      	push	{r0, r1, lr}
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	ab03      	add	r3, sp, #12
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <fiprintf+0x20>)
 8001c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c76:	6800      	ldr	r0, [r0, #0]
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	f7ff fca1 	bl	80015c0 <_vfiprintf_r>
 8001c7e:	b002      	add	sp, #8
 8001c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c84:	b003      	add	sp, #12
 8001c86:	4770      	bx	lr
 8001c88:	200000ac 	.word	0x200000ac

08001c8c <__swbuf_r>:
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	460e      	mov	r6, r1
 8001c90:	4614      	mov	r4, r2
 8001c92:	4605      	mov	r5, r0
 8001c94:	b118      	cbz	r0, 8001c9e <__swbuf_r+0x12>
 8001c96:	6a03      	ldr	r3, [r0, #32]
 8001c98:	b90b      	cbnz	r3, 8001c9e <__swbuf_r+0x12>
 8001c9a:	f7ff fa3d 	bl	8001118 <__sinit>
 8001c9e:	69a3      	ldr	r3, [r4, #24]
 8001ca0:	60a3      	str	r3, [r4, #8]
 8001ca2:	89a3      	ldrh	r3, [r4, #12]
 8001ca4:	071a      	lsls	r2, r3, #28
 8001ca6:	d525      	bpl.n	8001cf4 <__swbuf_r+0x68>
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	b31b      	cbz	r3, 8001cf4 <__swbuf_r+0x68>
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	6922      	ldr	r2, [r4, #16]
 8001cb0:	1a98      	subs	r0, r3, r2
 8001cb2:	6963      	ldr	r3, [r4, #20]
 8001cb4:	b2f6      	uxtb	r6, r6
 8001cb6:	4283      	cmp	r3, r0
 8001cb8:	4637      	mov	r7, r6
 8001cba:	dc04      	bgt.n	8001cc6 <__swbuf_r+0x3a>
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	f7ff ffaa 	bl	8001c18 <_fflush_r>
 8001cc4:	b9e0      	cbnz	r0, 8001d00 <__swbuf_r+0x74>
 8001cc6:	68a3      	ldr	r3, [r4, #8]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	60a3      	str	r3, [r4, #8]
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	6022      	str	r2, [r4, #0]
 8001cd2:	701e      	strb	r6, [r3, #0]
 8001cd4:	6962      	ldr	r2, [r4, #20]
 8001cd6:	1c43      	adds	r3, r0, #1
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d004      	beq.n	8001ce6 <__swbuf_r+0x5a>
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	07db      	lsls	r3, r3, #31
 8001ce0:	d506      	bpl.n	8001cf0 <__swbuf_r+0x64>
 8001ce2:	2e0a      	cmp	r6, #10
 8001ce4:	d104      	bne.n	8001cf0 <__swbuf_r+0x64>
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	4628      	mov	r0, r5
 8001cea:	f7ff ff95 	bl	8001c18 <_fflush_r>
 8001cee:	b938      	cbnz	r0, 8001d00 <__swbuf_r+0x74>
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f000 f806 	bl	8001d08 <__swsetup_r>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d0d5      	beq.n	8001cac <__swbuf_r+0x20>
 8001d00:	f04f 37ff 	mov.w	r7, #4294967295
 8001d04:	e7f4      	b.n	8001cf0 <__swbuf_r+0x64>
	...

08001d08 <__swsetup_r>:
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <__swsetup_r+0xac>)
 8001d0c:	4605      	mov	r5, r0
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	460c      	mov	r4, r1
 8001d12:	b118      	cbz	r0, 8001d1c <__swsetup_r+0x14>
 8001d14:	6a03      	ldr	r3, [r0, #32]
 8001d16:	b90b      	cbnz	r3, 8001d1c <__swsetup_r+0x14>
 8001d18:	f7ff f9fe 	bl	8001118 <__sinit>
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d22:	0718      	lsls	r0, r3, #28
 8001d24:	d422      	bmi.n	8001d6c <__swsetup_r+0x64>
 8001d26:	06d9      	lsls	r1, r3, #27
 8001d28:	d407      	bmi.n	8001d3a <__swsetup_r+0x32>
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	602b      	str	r3, [r5, #0]
 8001d2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d32:	81a3      	strh	r3, [r4, #12]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	e034      	b.n	8001da4 <__swsetup_r+0x9c>
 8001d3a:	0758      	lsls	r0, r3, #29
 8001d3c:	d512      	bpl.n	8001d64 <__swsetup_r+0x5c>
 8001d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d40:	b141      	cbz	r1, 8001d54 <__swsetup_r+0x4c>
 8001d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d46:	4299      	cmp	r1, r3
 8001d48:	d002      	beq.n	8001d50 <__swsetup_r+0x48>
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f7ff fb12 	bl	8001374 <_free_r>
 8001d50:	2300      	movs	r3, #0
 8001d52:	6363      	str	r3, [r4, #52]	; 0x34
 8001d54:	89a3      	ldrh	r3, [r4, #12]
 8001d56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d5a:	81a3      	strh	r3, [r4, #12]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	6063      	str	r3, [r4, #4]
 8001d60:	6923      	ldr	r3, [r4, #16]
 8001d62:	6023      	str	r3, [r4, #0]
 8001d64:	89a3      	ldrh	r3, [r4, #12]
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	81a3      	strh	r3, [r4, #12]
 8001d6c:	6923      	ldr	r3, [r4, #16]
 8001d6e:	b94b      	cbnz	r3, 8001d84 <__swsetup_r+0x7c>
 8001d70:	89a3      	ldrh	r3, [r4, #12]
 8001d72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7a:	d003      	beq.n	8001d84 <__swsetup_r+0x7c>
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 f857 	bl	8001e32 <__smakebuf_r>
 8001d84:	89a0      	ldrh	r0, [r4, #12]
 8001d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d8a:	f010 0301 	ands.w	r3, r0, #1
 8001d8e:	d00a      	beq.n	8001da6 <__swsetup_r+0x9e>
 8001d90:	2300      	movs	r3, #0
 8001d92:	60a3      	str	r3, [r4, #8]
 8001d94:	6963      	ldr	r3, [r4, #20]
 8001d96:	425b      	negs	r3, r3
 8001d98:	61a3      	str	r3, [r4, #24]
 8001d9a:	6923      	ldr	r3, [r4, #16]
 8001d9c:	b943      	cbnz	r3, 8001db0 <__swsetup_r+0xa8>
 8001d9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001da2:	d1c4      	bne.n	8001d2e <__swsetup_r+0x26>
 8001da4:	bd38      	pop	{r3, r4, r5, pc}
 8001da6:	0781      	lsls	r1, r0, #30
 8001da8:	bf58      	it	pl
 8001daa:	6963      	ldrpl	r3, [r4, #20]
 8001dac:	60a3      	str	r3, [r4, #8]
 8001dae:	e7f4      	b.n	8001d9a <__swsetup_r+0x92>
 8001db0:	2000      	movs	r0, #0
 8001db2:	e7f7      	b.n	8001da4 <__swsetup_r+0x9c>
 8001db4:	200000ac 	.word	0x200000ac

08001db8 <_sbrk_r>:
 8001db8:	b538      	push	{r3, r4, r5, lr}
 8001dba:	4d06      	ldr	r5, [pc, #24]	; (8001dd4 <_sbrk_r+0x1c>)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	602b      	str	r3, [r5, #0]
 8001dc4:	f7ff f87e 	bl	8000ec4 <_sbrk>
 8001dc8:	1c43      	adds	r3, r0, #1
 8001dca:	d102      	bne.n	8001dd2 <_sbrk_r+0x1a>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	b103      	cbz	r3, 8001dd2 <_sbrk_r+0x1a>
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	2000c6f0 	.word	0x2000c6f0

08001dd8 <abort>:
 8001dd8:	b508      	push	{r3, lr}
 8001dda:	2006      	movs	r0, #6
 8001ddc:	f000 f88e 	bl	8001efc <raise>
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7fe fffc 	bl	8000dde <_exit>

08001de6 <__swhatbuf_r>:
 8001de6:	b570      	push	{r4, r5, r6, lr}
 8001de8:	460c      	mov	r4, r1
 8001dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dee:	2900      	cmp	r1, #0
 8001df0:	b096      	sub	sp, #88	; 0x58
 8001df2:	4615      	mov	r5, r2
 8001df4:	461e      	mov	r6, r3
 8001df6:	da0d      	bge.n	8001e14 <__swhatbuf_r+0x2e>
 8001df8:	89a3      	ldrh	r3, [r4, #12]
 8001dfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001e08:	2340      	movne	r3, #64	; 0x40
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	6031      	str	r1, [r6, #0]
 8001e0e:	602b      	str	r3, [r5, #0]
 8001e10:	b016      	add	sp, #88	; 0x58
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	466a      	mov	r2, sp
 8001e16:	f000 f879 	bl	8001f0c <_fstat_r>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	dbec      	blt.n	8001df8 <__swhatbuf_r+0x12>
 8001e1e:	9901      	ldr	r1, [sp, #4]
 8001e20:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001e24:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001e28:	4259      	negs	r1, r3
 8001e2a:	4159      	adcs	r1, r3
 8001e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e30:	e7eb      	b.n	8001e0a <__swhatbuf_r+0x24>

08001e32 <__smakebuf_r>:
 8001e32:	898b      	ldrh	r3, [r1, #12]
 8001e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e36:	079d      	lsls	r5, r3, #30
 8001e38:	4606      	mov	r6, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	d507      	bpl.n	8001e4e <__smakebuf_r+0x1c>
 8001e3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e42:	6023      	str	r3, [r4, #0]
 8001e44:	6123      	str	r3, [r4, #16]
 8001e46:	2301      	movs	r3, #1
 8001e48:	6163      	str	r3, [r4, #20]
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
 8001e4e:	ab01      	add	r3, sp, #4
 8001e50:	466a      	mov	r2, sp
 8001e52:	f7ff ffc8 	bl	8001de6 <__swhatbuf_r>
 8001e56:	9900      	ldr	r1, [sp, #0]
 8001e58:	4605      	mov	r5, r0
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f7ff fafc 	bl	8001458 <_malloc_r>
 8001e60:	b948      	cbnz	r0, 8001e76 <__smakebuf_r+0x44>
 8001e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e66:	059a      	lsls	r2, r3, #22
 8001e68:	d4ef      	bmi.n	8001e4a <__smakebuf_r+0x18>
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	81a3      	strh	r3, [r4, #12]
 8001e74:	e7e3      	b.n	8001e3e <__smakebuf_r+0xc>
 8001e76:	89a3      	ldrh	r3, [r4, #12]
 8001e78:	6020      	str	r0, [r4, #0]
 8001e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7e:	81a3      	strh	r3, [r4, #12]
 8001e80:	9b00      	ldr	r3, [sp, #0]
 8001e82:	6163      	str	r3, [r4, #20]
 8001e84:	9b01      	ldr	r3, [sp, #4]
 8001e86:	6120      	str	r0, [r4, #16]
 8001e88:	b15b      	cbz	r3, 8001ea2 <__smakebuf_r+0x70>
 8001e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e8e:	4630      	mov	r0, r6
 8001e90:	f000 f84e 	bl	8001f30 <_isatty_r>
 8001e94:	b128      	cbz	r0, 8001ea2 <__smakebuf_r+0x70>
 8001e96:	89a3      	ldrh	r3, [r4, #12]
 8001e98:	f023 0303 	bic.w	r3, r3, #3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	81a3      	strh	r3, [r4, #12]
 8001ea2:	89a3      	ldrh	r3, [r4, #12]
 8001ea4:	431d      	orrs	r5, r3
 8001ea6:	81a5      	strh	r5, [r4, #12]
 8001ea8:	e7cf      	b.n	8001e4a <__smakebuf_r+0x18>

08001eaa <_raise_r>:
 8001eaa:	291f      	cmp	r1, #31
 8001eac:	b538      	push	{r3, r4, r5, lr}
 8001eae:	4604      	mov	r4, r0
 8001eb0:	460d      	mov	r5, r1
 8001eb2:	d904      	bls.n	8001ebe <_raise_r+0x14>
 8001eb4:	2316      	movs	r3, #22
 8001eb6:	6003      	str	r3, [r0, #0]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	bd38      	pop	{r3, r4, r5, pc}
 8001ebe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001ec0:	b112      	cbz	r2, 8001ec8 <_raise_r+0x1e>
 8001ec2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ec6:	b94b      	cbnz	r3, 8001edc <_raise_r+0x32>
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f000 f853 	bl	8001f74 <_getpid_r>
 8001ece:	462a      	mov	r2, r5
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ed8:	f000 b83a 	b.w	8001f50 <_kill_r>
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d00a      	beq.n	8001ef6 <_raise_r+0x4c>
 8001ee0:	1c59      	adds	r1, r3, #1
 8001ee2:	d103      	bne.n	8001eec <_raise_r+0x42>
 8001ee4:	2316      	movs	r3, #22
 8001ee6:	6003      	str	r3, [r0, #0]
 8001ee8:	2001      	movs	r0, #1
 8001eea:	e7e7      	b.n	8001ebc <_raise_r+0x12>
 8001eec:	2400      	movs	r4, #0
 8001eee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	4798      	blx	r3
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e7e0      	b.n	8001ebc <_raise_r+0x12>
	...

08001efc <raise>:
 8001efc:	4b02      	ldr	r3, [pc, #8]	; (8001f08 <raise+0xc>)
 8001efe:	4601      	mov	r1, r0
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f7ff bfd2 	b.w	8001eaa <_raise_r>
 8001f06:	bf00      	nop
 8001f08:	200000ac 	.word	0x200000ac

08001f0c <_fstat_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4d07      	ldr	r5, [pc, #28]	; (8001f2c <_fstat_r+0x20>)
 8001f10:	2300      	movs	r3, #0
 8001f12:	4604      	mov	r4, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	602b      	str	r3, [r5, #0]
 8001f1a:	f7fe ffae 	bl	8000e7a <_fstat>
 8001f1e:	1c43      	adds	r3, r0, #1
 8001f20:	d102      	bne.n	8001f28 <_fstat_r+0x1c>
 8001f22:	682b      	ldr	r3, [r5, #0]
 8001f24:	b103      	cbz	r3, 8001f28 <_fstat_r+0x1c>
 8001f26:	6023      	str	r3, [r4, #0]
 8001f28:	bd38      	pop	{r3, r4, r5, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000c6f0 	.word	0x2000c6f0

08001f30 <_isatty_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d06      	ldr	r5, [pc, #24]	; (8001f4c <_isatty_r+0x1c>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	602b      	str	r3, [r5, #0]
 8001f3c:	f7fe ffac 	bl	8000e98 <_isatty>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_isatty_r+0x1a>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_isatty_r+0x1a>
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	2000c6f0 	.word	0x2000c6f0

08001f50 <_kill_r>:
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	4d07      	ldr	r5, [pc, #28]	; (8001f70 <_kill_r+0x20>)
 8001f54:	2300      	movs	r3, #0
 8001f56:	4604      	mov	r4, r0
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	602b      	str	r3, [r5, #0]
 8001f5e:	f7fe ff2e 	bl	8000dbe <_kill>
 8001f62:	1c43      	adds	r3, r0, #1
 8001f64:	d102      	bne.n	8001f6c <_kill_r+0x1c>
 8001f66:	682b      	ldr	r3, [r5, #0]
 8001f68:	b103      	cbz	r3, 8001f6c <_kill_r+0x1c>
 8001f6a:	6023      	str	r3, [r4, #0]
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000c6f0 	.word	0x2000c6f0

08001f74 <_getpid_r>:
 8001f74:	f7fe bf1c 	b.w	8000db0 <_getpid>

08001f78 <_init>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr

08001f84 <_fini>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	bf00      	nop
 8001f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8a:	bc08      	pop	{r3}
 8001f8c:	469e      	mov	lr, r3
 8001f8e:	4770      	bx	lr
